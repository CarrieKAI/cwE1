/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.group19.easySql.ide.contentassist.antlr.internal.InternalEasySqlParser;
import uk.ac.kcl.inf.group19.easySql.services.EasySqlGrammarAccess;

public class EasySqlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EasySqlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EasySqlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getQueryStatementAccess().getAlternatives(), "rule__QueryStatement__Alternatives");
			builder.put(grammarAccess.getManipulateStatementAccess().getAlternatives(), "rule__ManipulateStatement__Alternatives");
			builder.put(grammarAccess.getMultiTypeAccess().getAlternatives(), "rule__MultiType__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getJoinAccess().getAlternatives(), "rule__Join__Alternatives");
			builder.put(grammarAccess.getOrderAccess().getAlternatives(), "rule__Order__Alternatives");
			builder.put(grammarAccess.getTableDeclarationAccess().getGroup(), "rule__TableDeclaration__Group__0");
			builder.put(grammarAccess.getSingleSelectDeclarationAccess().getGroup(), "rule__SingleSelectDeclaration__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
			builder.put(grammarAccess.getEquationAccess().getGroup(), "rule__Equation__Group__0");
			builder.put(grammarAccess.getVvalueAccess().getGroup(), "rule__Vvalue__Group__0");
			builder.put(grammarAccess.getMultiEquationAccess().getGroup(), "rule__MultiEquation__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getUpdateAccess().getGroup(), "rule__Update__Group__0");
			builder.put(grammarAccess.getDeleteAccess().getGroup(), "rule__Delete__Group__0");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getGroup(), "rule__SimpleSelectQuery__Group__0");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getGroup_8(), "rule__SimpleSelectQuery__Group_8__0");
			builder.put(grammarAccess.getJoinQueryAccess().getGroup(), "rule__JoinQuery__Group__0");
			builder.put(grammarAccess.getNestedQueryAccess().getGroup(), "rule__NestedQuery__Group__0");
			builder.put(grammarAccess.getSqlProgramAccess().getStatementsAssignment(), "rule__SqlProgram__StatementsAssignment");
			builder.put(grammarAccess.getNumLiteralAccess().getVarAssignment(), "rule__NumLiteral__VarAssignment");
			builder.put(grammarAccess.getStrLiteralAccess().getVarAssignment(), "rule__StrLiteral__VarAssignment");
			builder.put(grammarAccess.getRinLiteralAccess().getVarAssignment(), "rule__RinLiteral__VarAssignment");
			builder.put(grammarAccess.getTableDeclarationAccess().getNameAssignment_1(), "rule__TableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getSingleSelectDeclarationAccess().getNameAssignment_1(), "rule__SingleSelectDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getSingleSelectDeclarationAccess().getSingleSelectAssignment_3(), "rule__SingleSelectDeclaration__SingleSelectAssignment_3");
			builder.put(grammarAccess.getValueAccess().getValueAssignment_0(), "rule__Value__ValueAssignment_0");
			builder.put(grammarAccess.getValueAccess().getSeparationAssignment_1(), "rule__Value__SeparationAssignment_1");
			builder.put(grammarAccess.getEquationAccess().getAttributeAssignment_0(), "rule__Equation__AttributeAssignment_0");
			builder.put(grammarAccess.getEquationAccess().getOperatorAssignment_1(), "rule__Equation__OperatorAssignment_1");
			builder.put(grammarAccess.getEquationAccess().getValueAssignment_2(), "rule__Equation__ValueAssignment_2");
			builder.put(grammarAccess.getEquationAccess().getSeparationAssignment_3(), "rule__Equation__SeparationAssignment_3");
			builder.put(grammarAccess.getVvalueAccess().getTableAssignment_0(), "rule__Vvalue__TableAssignment_0");
			builder.put(grammarAccess.getVvalueAccess().getAttributeAssignment_2(), "rule__Vvalue__AttributeAssignment_2");
			builder.put(grammarAccess.getVvalueAccess().getSeparationAssignment_3(), "rule__Vvalue__SeparationAssignment_3");
			builder.put(grammarAccess.getMultiEquationAccess().getEquationLeftAssignment_0(), "rule__MultiEquation__EquationLeftAssignment_0");
			builder.put(grammarAccess.getMultiEquationAccess().getOperatorAssignment_1(), "rule__MultiEquation__OperatorAssignment_1");
			builder.put(grammarAccess.getMultiEquationAccess().getEquationRightAssignment_2(), "rule__MultiEquation__EquationRightAssignment_2");
			builder.put(grammarAccess.getInsertAccess().getTableAssignment_0(), "rule__Insert__TableAssignment_0");
			builder.put(grammarAccess.getInsertAccess().getInsert_dataAssignment_2(), "rule__Insert__Insert_dataAssignment_2");
			builder.put(grammarAccess.getUpdateAccess().getTableAssignment_0(), "rule__Update__TableAssignment_0");
			builder.put(grammarAccess.getUpdateAccess().getModificationAssignment_2(), "rule__Update__ModificationAssignment_2");
			builder.put(grammarAccess.getUpdateAccess().getUpdateconditionAssignment_5(), "rule__Update__UpdateconditionAssignment_5");
			builder.put(grammarAccess.getDeleteAccess().getTableAssignment_0(), "rule__Delete__TableAssignment_0");
			builder.put(grammarAccess.getDeleteAccess().getDeleteconditionAssignment_2(), "rule__Delete__DeleteconditionAssignment_2");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getStableAssignment_0(), "rule__SimpleSelectQuery__StableAssignment_0");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getSattributesAssignment_2(), "rule__SimpleSelectQuery__SattributesAssignment_2");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getSimpleconditionAssignment_5(), "rule__SimpleSelectQuery__SimpleconditionAssignment_5");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getRemoveDupAssignment_7(), "rule__SimpleSelectQuery__RemoveDupAssignment_7");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getOrdertypeAssignment_8_1(), "rule__SimpleSelectQuery__OrdertypeAssignment_8_1");
			builder.put(grammarAccess.getSimpleSelectQueryAccess().getSCattributesAssignment_8_3(), "rule__SimpleSelectQuery__SCattributesAssignment_8_3");
			builder.put(grammarAccess.getJoinQueryAccess().getJtable1Assignment_0(), "rule__JoinQuery__Jtable1Assignment_0");
			builder.put(grammarAccess.getJoinQueryAccess().getJattributesAssignment_2(), "rule__JoinQuery__JattributesAssignment_2");
			builder.put(grammarAccess.getJoinQueryAccess().getJointypeAssignment_5(), "rule__JoinQuery__JointypeAssignment_5");
			builder.put(grammarAccess.getJoinQueryAccess().getJtable2Assignment_7(), "rule__JoinQuery__Jtable2Assignment_7");
			builder.put(grammarAccess.getJoinQueryAccess().getJoinconditionAssignment_10(), "rule__JoinQuery__JoinconditionAssignment_10");
			builder.put(grammarAccess.getNestedQueryAccess().getNtableAssignment_0(), "rule__NestedQuery__NtableAssignment_0");
			builder.put(grammarAccess.getNestedQueryAccess().getNattributesAssignment_2(), "rule__NestedQuery__NattributesAssignment_2");
			builder.put(grammarAccess.getNestedQueryAccess().getNattributes1Assignment_5(), "rule__NestedQuery__Nattributes1Assignment_5");
			builder.put(grammarAccess.getNestedQueryAccess().getSubselectqueryAssignment_8(), "rule__NestedQuery__SubselectqueryAssignment_8");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EasySqlGrammarAccess grammarAccess;

	@Override
	protected InternalEasySqlParser createParser() {
		InternalEasySqlParser result = new InternalEasySqlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EasySqlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EasySqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
