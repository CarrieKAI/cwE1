/*
 * generated by Xtext 2.25.0
 */
grammar InternalEasySql;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.group19.easySql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.group19.easySql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.group19.easySql.services.EasySqlGrammarAccess;

}

@parser::members {

 	private EasySqlGrammarAccess grammarAccess;

    public InternalEasySqlParser(TokenStream input, EasySqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SqlProgram";
   	}

   	@Override
   	protected EasySqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSqlProgram
entryRuleSqlProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSqlProgramRule()); }
	iv_ruleSqlProgram=ruleSqlProgram
	{ $current=$iv_ruleSqlProgram.current; }
	EOF;

// Rule SqlProgram
ruleSqlProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSqlProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSqlProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.group19.easySql.EasySql.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getQueryStatementParserRuleCall_0());
		}
		this_QueryStatement_0=ruleQueryStatement
		{
			$current = $this_QueryStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getManipulateStatementParserRuleCall_1());
		}
		this_ManipulateStatement_1=ruleManipulateStatement
		{
			$current = $this_ManipulateStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTableDeclarationParserRuleCall_2());
		}
		this_TableDeclaration_2=ruleTableDeclaration
		{
			$current = $this_TableDeclaration_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSingleSelectDeclarationParserRuleCall_3());
		}
		this_SingleSelectDeclaration_3=ruleSingleSelectDeclaration
		{
			$current = $this_SingleSelectDeclaration_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQueryStatement
entryRuleQueryStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryStatementRule()); }
	iv_ruleQueryStatement=ruleQueryStatement
	{ $current=$iv_ruleQueryStatement.current; }
	EOF;

// Rule QueryStatement
ruleQueryStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQueryStatementAccess().getSimpleSelectQueryParserRuleCall_0());
		}
		this_SimpleSelectQuery_0=ruleSimpleSelectQuery
		{
			$current = $this_SimpleSelectQuery_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueryStatementAccess().getJoinQueryParserRuleCall_1());
		}
		this_JoinQuery_1=ruleJoinQuery
		{
			$current = $this_JoinQuery_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueryStatementAccess().getNestedQueryParserRuleCall_2());
		}
		this_NestedQuery_2=ruleNestedQuery
		{
			$current = $this_NestedQuery_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleManipulateStatement
entryRuleManipulateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getManipulateStatementRule()); }
	iv_ruleManipulateStatement=ruleManipulateStatement
	{ $current=$iv_ruleManipulateStatement.current; }
	EOF;

// Rule ManipulateStatement
ruleManipulateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getManipulateStatementAccess().getInsertParserRuleCall_0());
		}
		this_Insert_0=ruleInsert
		{
			$current = $this_Insert_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getManipulateStatementAccess().getUpdateParserRuleCall_1());
		}
		this_Update_1=ruleUpdate
		{
			$current = $this_Update_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getManipulateStatementAccess().getDeleteParserRuleCall_2());
		}
		this_Delete_2=ruleDelete
		{
			$current = $this_Delete_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMultiType
entryRuleMultiType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiTypeRule()); }
	iv_ruleMultiType=ruleMultiType
	{ $current=$iv_ruleMultiType.current; }
	EOF;

// Rule MultiType
ruleMultiType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiTypeAccess().getStrLiteralParserRuleCall_0());
		}
		this_StrLiteral_0=ruleStrLiteral
		{
			$current = $this_StrLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMultiTypeAccess().getRinLiteralParserRuleCall_1());
		}
		this_RinLiteral_1=ruleRinLiteral
		{
			$current = $this_RinLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMultiTypeAccess().getNumLiteralParserRuleCall_2());
		}
		this_NumLiteral_2=ruleNumLiteral
		{
			$current = $this_NumLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumLiteral
entryRuleNumLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumLiteralRule()); }
	iv_ruleNumLiteral=ruleNumLiteral
	{ $current=$iv_ruleNumLiteral.current; }
	EOF;

// Rule NumLiteral
ruleNumLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_var_0_0=RULE_INT
			{
				newLeafNode(lv_var_0_0, grammarAccess.getNumLiteralAccess().getVarINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"var",
					lv_var_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStrLiteral
entryRuleStrLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStrLiteralRule()); }
	iv_ruleStrLiteral=ruleStrLiteral
	{ $current=$iv_ruleStrLiteral.current; }
	EOF;

// Rule StrLiteral
ruleStrLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_var_0_0=RULE_ID
			{
				newLeafNode(lv_var_0_0, grammarAccess.getStrLiteralAccess().getVarIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStrLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"var",
					lv_var_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleRinLiteral
entryRuleRinLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRinLiteralRule()); }
	iv_ruleRinLiteral=ruleRinLiteral
	{ $current=$iv_ruleRinLiteral.current; }
	EOF;

// Rule RinLiteral
ruleRinLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_var_0_0=RULE_STRING
			{
				newLeafNode(lv_var_0_0, grammarAccess.getRinLiteralAccess().getVarSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRinLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"var",
					lv_var_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleTableDeclaration
entryRuleTableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableDeclarationRule()); }
	iv_ruleTableDeclaration=ruleTableDeclaration
	{ $current=$iv_ruleTableDeclaration.current; }
	EOF;

// Rule TableDeclaration
ruleTableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Table'
		{
			newLeafNode(otherlv_0, grammarAccess.getTableDeclarationAccess().getTableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSingleSelectDeclaration
entryRuleSingleSelectDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleSelectDeclarationRule()); }
	iv_ruleSingleSelectDeclaration=ruleSingleSelectDeclaration
	{ $current=$iv_ruleSingleSelectDeclaration.current; }
	EOF;

// Rule SingleSelectDeclaration
ruleSingleSelectDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getSingleSelectDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSingleSelectDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleSelectDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getSingleSelectDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleSelectDeclarationAccess().getSingleSelectSimpleSelectQueryParserRuleCall_3_0());
				}
				lv_singleSelect_3_0=ruleSimpleSelectQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleSelectDeclarationRule());
					}
					set(
						$current,
						"singleSelect",
						lv_singleSelect_3_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.SimpleSelectQuery");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getValueMultiTypeParserRuleCall_0_0());
				}
				lv_value_0_0=ruleMultiType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.MultiType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_separation_1_0=','
				{
					newLeafNode(lv_separation_1_0, grammarAccess.getValueAccess().getSeparationCommaKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					addWithLastConsumed($current, "separation", lv_separation_1_0, ",");
				}
			)
		)*
	)
;

// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	iv_ruleEquation=ruleEquation
	{ $current=$iv_ruleEquation.current; }
	EOF;

// Rule Equation
ruleEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_attribute_0_0=RULE_ID
				{
					newLeafNode(lv_attribute_0_0, grammarAccess.getEquationAccess().getAttributeIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquationRule());
					}
					setWithLastConsumed(
						$current,
						"attribute",
						lv_attribute_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEquationAccess().getOperatorOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEquationAccess().getValueMultiTypeParserRuleCall_2_0());
				}
				lv_value_2_0=ruleMultiType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquationRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.MultiType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_separation_3_0=','
				{
					newLeafNode(lv_separation_3_0, grammarAccess.getEquationAccess().getSeparationCommaKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquationRule());
					}
					addWithLastConsumed($current, "separation", lv_separation_3_0, ",");
				}
			)
		)*
	)
;

// Entry rule entryRuleVvalue
entryRuleVvalue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVvalueRule()); }
	iv_ruleVvalue=ruleVvalue
	{ $current=$iv_ruleVvalue.current; }
	EOF;

// Rule Vvalue
ruleVvalue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVvalueRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getVvalueAccess().getTableTableDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getVvalueAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVvalueAccess().getAttributeMultiTypeParserRuleCall_2_0());
				}
				lv_attribute_2_0=ruleMultiType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVvalueRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.MultiType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_separation_3_0=','
				{
					newLeafNode(lv_separation_3_0, grammarAccess.getVvalueAccess().getSeparationCommaKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVvalueRule());
					}
					addWithLastConsumed($current, "separation", lv_separation_3_0, ",");
				}
			)
		)*
	)
;

// Entry rule entryRuleMultiEquation
entryRuleMultiEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiEquationRule()); }
	iv_ruleMultiEquation=ruleMultiEquation
	{ $current=$iv_ruleMultiEquation.current; }
	EOF;

// Rule MultiEquation
ruleMultiEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiEquationAccess().getEquationLeftVvalueParserRuleCall_0_0());
				}
				lv_EquationLeft_0_0=ruleVvalue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiEquationRule());
					}
					set(
						$current,
						"EquationLeft",
						lv_EquationLeft_0_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Vvalue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiEquationAccess().getOperatorOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiEquationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiEquationAccess().getEquationRightVvalueParserRuleCall_2_0());
				}
				lv_EquationRight_2_0=ruleVvalue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiEquationRule());
					}
					set(
						$current,
						"EquationRight",
						lv_EquationRight_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Vvalue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current; }
	EOF;

// Rule Insert
ruleInsert returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInsertRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getTableTableDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='.Insert('
		{
			newLeafNode(otherlv_1, grammarAccess.getInsertAccess().getInsertKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getInsert_dataValueParserRuleCall_2_0());
				}
				lv_insert_data_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					add(
						$current,
						"insert_data",
						lv_insert_data_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getInsertAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleUpdate
entryRuleUpdate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateRule()); }
	iv_ruleUpdate=ruleUpdate
	{ $current=$iv_ruleUpdate.current; }
	EOF;

// Rule Update
ruleUpdate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpdateRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getUpdateAccess().getTableTableDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='.Update('
		{
			newLeafNode(otherlv_1, grammarAccess.getUpdateAccess().getUpdateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateAccess().getModificationEquationParserRuleCall_2_0());
				}
				lv_modification_2_0=ruleEquation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateRule());
					}
					add(
						$current,
						"modification",
						lv_modification_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Equation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getUpdateAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='.Condition('
		{
			newLeafNode(otherlv_4, grammarAccess.getUpdateAccess().getConditionKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateAccess().getUpdateconditionEquationParserRuleCall_5_0());
				}
				lv_updatecondition_5_0=ruleEquation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateRule());
					}
					add(
						$current,
						"updatecondition",
						lv_updatecondition_5_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Equation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getUpdateAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleDelete
entryRuleDelete returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteRule()); }
	iv_ruleDelete=ruleDelete
	{ $current=$iv_ruleDelete.current; }
	EOF;

// Rule Delete
ruleDelete returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeleteRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getDeleteAccess().getTableTableDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='.Delete('
		{
			newLeafNode(otherlv_1, grammarAccess.getDeleteAccess().getDeleteKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteAccess().getDeleteconditionEquationParserRuleCall_2_0());
				}
				lv_deletecondition_2_0=ruleEquation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteRule());
					}
					add(
						$current,
						"deletecondition",
						lv_deletecondition_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Equation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getDeleteAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSimpleSelectQuery
entryRuleSimpleSelectQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleSelectQueryRule()); }
	iv_ruleSimpleSelectQuery=ruleSimpleSelectQuery
	{ $current=$iv_ruleSimpleSelectQuery.current; }
	EOF;

// Rule SimpleSelectQuery
ruleSimpleSelectQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleSelectQueryRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSimpleSelectQueryAccess().getStableTableDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='.Search('
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleSelectQueryAccess().getSearchKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSelectQueryAccess().getSattributesValueParserRuleCall_2_0());
				}
				lv_Sattributes_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSelectQueryRule());
					}
					add(
						$current,
						"Sattributes",
						lv_Sattributes_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSimpleSelectQueryAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='.Condition('
		{
			newLeafNode(otherlv_4, grammarAccess.getSimpleSelectQueryAccess().getConditionKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSelectQueryAccess().getSimpleconditionEquationParserRuleCall_5_0());
				}
				lv_simplecondition_5_0=ruleEquation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSelectQueryRule());
					}
					add(
						$current,
						"simplecondition",
						lv_simplecondition_5_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Equation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getSimpleSelectQueryAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				lv_removeDup_7_0='.RemoveDuplication()'
				{
					newLeafNode(lv_removeDup_7_0, grammarAccess.getSimpleSelectQueryAccess().getRemoveDupRemoveDuplicationKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleSelectQueryRule());
					}
					addWithLastConsumed($current, "removeDup", lv_removeDup_7_0, ".RemoveDuplication()");
				}
			)
		)?
		(
			otherlv_8='.'
			{
				newLeafNode(otherlv_8, grammarAccess.getSimpleSelectQueryAccess().getFullStopKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleSelectQueryAccess().getOrdertypeOrderEnumRuleCall_8_1_0());
					}
					lv_ordertype_9_0=ruleOrder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleSelectQueryRule());
						}
						set(
							$current,
							"ordertype",
							lv_ordertype_9_0,
							"uk.ac.kcl.inf.group19.easySql.EasySql.Order");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getSimpleSelectQueryAccess().getLeftParenthesisKeyword_8_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleSelectQueryAccess().getSCattributesValueParserRuleCall_8_3_0());
					}
					lv_SCattributes_11_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleSelectQueryRule());
						}
						add(
							$current,
							"SCattributes",
							lv_SCattributes_11_0,
							"uk.ac.kcl.inf.group19.easySql.EasySql.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getSimpleSelectQueryAccess().getRightParenthesisKeyword_8_4());
			}
		)?
	)
;

// Entry rule entryRuleJoinQuery
entryRuleJoinQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinQueryRule()); }
	iv_ruleJoinQuery=ruleJoinQuery
	{ $current=$iv_ruleJoinQuery.current; }
	EOF;

// Rule JoinQuery
ruleJoinQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJoinQueryRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getJoinQueryAccess().getJtable1TableDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='.Joinsearch('
		{
			newLeafNode(otherlv_1, grammarAccess.getJoinQueryAccess().getJoinsearchKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinQueryAccess().getJattributesVvalueParserRuleCall_2_0());
				}
				lv_Jattributes_2_0=ruleVvalue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinQueryRule());
					}
					add(
						$current,
						"Jattributes",
						lv_Jattributes_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Vvalue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJoinQueryAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='.'
		{
			newLeafNode(otherlv_4, grammarAccess.getJoinQueryAccess().getFullStopKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinQueryAccess().getJointypeJoinEnumRuleCall_5_0());
				}
				lv_jointype_5_0=ruleJoin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinQueryRule());
					}
					set(
						$current,
						"jointype",
						lv_jointype_5_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Join");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='('
		{
			newLeafNode(otherlv_6, grammarAccess.getJoinQueryAccess().getLeftParenthesisKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJoinQueryRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getJoinQueryAccess().getJtable2TableDeclarationCrossReference_7_0());
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getJoinQueryAccess().getRightParenthesisKeyword_8());
		}
		otherlv_9='.On('
		{
			newLeafNode(otherlv_9, grammarAccess.getJoinQueryAccess().getOnKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinQueryAccess().getJoinconditionMultiEquationParserRuleCall_10_0());
				}
				lv_joincondition_10_0=ruleMultiEquation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinQueryRule());
					}
					add(
						$current,
						"joincondition",
						lv_joincondition_10_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.MultiEquation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11=')'
		{
			newLeafNode(otherlv_11, grammarAccess.getJoinQueryAccess().getRightParenthesisKeyword_11());
		}
	)
;

// Entry rule entryRuleNestedQuery
entryRuleNestedQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedQueryRule()); }
	iv_ruleNestedQuery=ruleNestedQuery
	{ $current=$iv_ruleNestedQuery.current; }
	EOF;

// Rule NestedQuery
ruleNestedQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNestedQueryRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getNestedQueryAccess().getNtableTableDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='.Subsearch('
		{
			newLeafNode(otherlv_1, grammarAccess.getNestedQueryAccess().getSubsearchKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedQueryAccess().getNattributesValueParserRuleCall_2_0());
				}
				lv_Nattributes_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedQueryRule());
					}
					add(
						$current,
						"Nattributes",
						lv_Nattributes_2_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNestedQueryAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='.When('
		{
			newLeafNode(otherlv_4, grammarAccess.getNestedQueryAccess().getWhenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedQueryAccess().getNattributes1ValueParserRuleCall_5_0());
				}
				lv_Nattributes1_5_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedQueryRule());
					}
					add(
						$current,
						"Nattributes1",
						lv_Nattributes1_5_0,
						"uk.ac.kcl.inf.group19.easySql.EasySql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getNestedQueryAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7='.In('
		{
			newLeafNode(otherlv_7, grammarAccess.getNestedQueryAccess().getInKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNestedQueryRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getNestedQueryAccess().getSubselectquerySingleSelectDeclarationCrossReference_8_0());
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getNestedQueryAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Rule Operator
ruleOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getOperatorAccess().getVaEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getVaEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getOperatorAccess().getVbEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getVbEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>='
			{
				$current = grammarAccess.getOperatorAccess().getVcEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getVcEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getOperatorAccess().getVdEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getVdEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='!='
			{
				$current = grammarAccess.getOperatorAccess().getVeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getVeEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='='
			{
				$current = grammarAccess.getOperatorAccess().getVfEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getVfEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule Join
ruleJoin returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='left_join'
			{
				$current = grammarAccess.getJoinAccess().getLeft_joinEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJoinAccess().getLeft_joinEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='right_join'
			{
				$current = grammarAccess.getJoinAccess().getRight_joinEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJoinAccess().getRight_joinEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='full_join'
			{
				$current = grammarAccess.getJoinAccess().getFull_joinEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJoinAccess().getFull_joinEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='inner_join'
			{
				$current = grammarAccess.getJoinAccess().getInner_joinEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getJoinAccess().getInner_joinEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Order
ruleOrder returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ascending'
			{
				$current = grammarAccess.getOrderAccess().getAscendingEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOrderAccess().getAscendingEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='descending'
			{
				$current = grammarAccess.getOrderAccess().getDescendingEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOrderAccess().getDescendingEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
