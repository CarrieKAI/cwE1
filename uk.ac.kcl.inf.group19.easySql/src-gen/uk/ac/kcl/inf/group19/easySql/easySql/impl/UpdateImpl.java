/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.easySql.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.group19.easySql.easySql.EasySqlPackage;
import uk.ac.kcl.inf.group19.easySql.easySql.Equation;
import uk.ac.kcl.inf.group19.easySql.easySql.Update;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Update</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.UpdateImpl#getModification <em>Modification</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.UpdateImpl#getUpdatecondition <em>Updatecondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UpdateImpl extends ManipulateStatementImpl implements Update
{
  /**
   * The cached value of the '{@link #getModification() <em>Modification</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModification()
   * @generated
   * @ordered
   */
  protected EList<Equation> modification;

  /**
   * The cached value of the '{@link #getUpdatecondition() <em>Updatecondition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdatecondition()
   * @generated
   * @ordered
   */
  protected EList<Equation> updatecondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UpdateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EasySqlPackage.Literals.UPDATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Equation> getModification()
  {
    if (modification == null)
    {
      modification = new EObjectContainmentEList<Equation>(Equation.class, this, EasySqlPackage.UPDATE__MODIFICATION);
    }
    return modification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Equation> getUpdatecondition()
  {
    if (updatecondition == null)
    {
      updatecondition = new EObjectContainmentEList<Equation>(Equation.class, this, EasySqlPackage.UPDATE__UPDATECONDITION);
    }
    return updatecondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EasySqlPackage.UPDATE__MODIFICATION:
        return ((InternalEList<?>)getModification()).basicRemove(otherEnd, msgs);
      case EasySqlPackage.UPDATE__UPDATECONDITION:
        return ((InternalEList<?>)getUpdatecondition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EasySqlPackage.UPDATE__MODIFICATION:
        return getModification();
      case EasySqlPackage.UPDATE__UPDATECONDITION:
        return getUpdatecondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EasySqlPackage.UPDATE__MODIFICATION:
        getModification().clear();
        getModification().addAll((Collection<? extends Equation>)newValue);
        return;
      case EasySqlPackage.UPDATE__UPDATECONDITION:
        getUpdatecondition().clear();
        getUpdatecondition().addAll((Collection<? extends Equation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.UPDATE__MODIFICATION:
        getModification().clear();
        return;
      case EasySqlPackage.UPDATE__UPDATECONDITION:
        getUpdatecondition().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.UPDATE__MODIFICATION:
        return modification != null && !modification.isEmpty();
      case EasySqlPackage.UPDATE__UPDATECONDITION:
        return updatecondition != null && !updatecondition.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //UpdateImpl
