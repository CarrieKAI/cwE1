/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.easySql.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.group19.easySql.easySql.EasySqlPackage;
import uk.ac.kcl.inf.group19.easySql.easySql.NestedQuery;
import uk.ac.kcl.inf.group19.easySql.easySql.SingleSelectDeclaration;
import uk.ac.kcl.inf.group19.easySql.easySql.TableDeclaration;
import uk.ac.kcl.inf.group19.easySql.easySql.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Nested Query</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.NestedQueryImpl#getNtable <em>Ntable</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.NestedQueryImpl#getNattributes <em>Nattributes</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.NestedQueryImpl#getNattributes1 <em>Nattributes1</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.NestedQueryImpl#getSubselectquery <em>Subselectquery</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NestedQueryImpl extends QueryStatementImpl implements NestedQuery
{
  /**
   * The cached value of the '{@link #getNtable() <em>Ntable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNtable()
   * @generated
   * @ordered
   */
  protected TableDeclaration ntable;

  /**
   * The cached value of the '{@link #getNattributes() <em>Nattributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNattributes()
   * @generated
   * @ordered
   */
  protected EList<Value> nattributes;

  /**
   * The cached value of the '{@link #getNattributes1() <em>Nattributes1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNattributes1()
   * @generated
   * @ordered
   */
  protected EList<Value> nattributes1;

  /**
   * The cached value of the '{@link #getSubselectquery() <em>Subselectquery</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubselectquery()
   * @generated
   * @ordered
   */
  protected SingleSelectDeclaration subselectquery;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NestedQueryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EasySqlPackage.Literals.NESTED_QUERY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableDeclaration getNtable()
  {
    if (ntable != null && ntable.eIsProxy())
    {
      InternalEObject oldNtable = (InternalEObject)ntable;
      ntable = (TableDeclaration)eResolveProxy(oldNtable);
      if (ntable != oldNtable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EasySqlPackage.NESTED_QUERY__NTABLE, oldNtable, ntable));
      }
    }
    return ntable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableDeclaration basicGetNtable()
  {
    return ntable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNtable(TableDeclaration newNtable)
  {
    TableDeclaration oldNtable = ntable;
    ntable = newNtable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.NESTED_QUERY__NTABLE, oldNtable, ntable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Value> getNattributes()
  {
    if (nattributes == null)
    {
      nattributes = new EObjectContainmentEList<Value>(Value.class, this, EasySqlPackage.NESTED_QUERY__NATTRIBUTES);
    }
    return nattributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Value> getNattributes1()
  {
    if (nattributes1 == null)
    {
      nattributes1 = new EObjectContainmentEList<Value>(Value.class, this, EasySqlPackage.NESTED_QUERY__NATTRIBUTES1);
    }
    return nattributes1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleSelectDeclaration getSubselectquery()
  {
    if (subselectquery != null && subselectquery.eIsProxy())
    {
      InternalEObject oldSubselectquery = (InternalEObject)subselectquery;
      subselectquery = (SingleSelectDeclaration)eResolveProxy(oldSubselectquery);
      if (subselectquery != oldSubselectquery)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EasySqlPackage.NESTED_QUERY__SUBSELECTQUERY, oldSubselectquery, subselectquery));
      }
    }
    return subselectquery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleSelectDeclaration basicGetSubselectquery()
  {
    return subselectquery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubselectquery(SingleSelectDeclaration newSubselectquery)
  {
    SingleSelectDeclaration oldSubselectquery = subselectquery;
    subselectquery = newSubselectquery;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.NESTED_QUERY__SUBSELECTQUERY, oldSubselectquery, subselectquery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES:
        return ((InternalEList<?>)getNattributes()).basicRemove(otherEnd, msgs);
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES1:
        return ((InternalEList<?>)getNattributes1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EasySqlPackage.NESTED_QUERY__NTABLE:
        if (resolve) return getNtable();
        return basicGetNtable();
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES:
        return getNattributes();
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES1:
        return getNattributes1();
      case EasySqlPackage.NESTED_QUERY__SUBSELECTQUERY:
        if (resolve) return getSubselectquery();
        return basicGetSubselectquery();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EasySqlPackage.NESTED_QUERY__NTABLE:
        setNtable((TableDeclaration)newValue);
        return;
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES:
        getNattributes().clear();
        getNattributes().addAll((Collection<? extends Value>)newValue);
        return;
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES1:
        getNattributes1().clear();
        getNattributes1().addAll((Collection<? extends Value>)newValue);
        return;
      case EasySqlPackage.NESTED_QUERY__SUBSELECTQUERY:
        setSubselectquery((SingleSelectDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.NESTED_QUERY__NTABLE:
        setNtable((TableDeclaration)null);
        return;
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES:
        getNattributes().clear();
        return;
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES1:
        getNattributes1().clear();
        return;
      case EasySqlPackage.NESTED_QUERY__SUBSELECTQUERY:
        setSubselectquery((SingleSelectDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.NESTED_QUERY__NTABLE:
        return ntable != null;
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES:
        return nattributes != null && !nattributes.isEmpty();
      case EasySqlPackage.NESTED_QUERY__NATTRIBUTES1:
        return nattributes1 != null && !nattributes1.isEmpty();
      case EasySqlPackage.NESTED_QUERY__SUBSELECTQUERY:
        return subselectquery != null;
    }
    return super.eIsSet(featureID);
  }

} //NestedQueryImpl
