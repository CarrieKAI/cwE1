/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EasySqlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SqlProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.SqlProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//SqlProgram:
		//    statements += Statement *
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement *
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQueryStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cManipulateStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSingleSelectDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//     QueryStatement| ManipulateStatement| TableDeclaration | SingleSelectDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QueryStatement| ManipulateStatement| TableDeclaration | SingleSelectDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QueryStatement
		public RuleCall getQueryStatementParserRuleCall_0() { return cQueryStatementParserRuleCall_0; }
		
		//ManipulateStatement
		public RuleCall getManipulateStatementParserRuleCall_1() { return cManipulateStatementParserRuleCall_1; }
		
		//TableDeclaration
		public RuleCall getTableDeclarationParserRuleCall_2() { return cTableDeclarationParserRuleCall_2; }
		
		//SingleSelectDeclaration
		public RuleCall getSingleSelectDeclarationParserRuleCall_3() { return cSingleSelectDeclarationParserRuleCall_3; }
	}
	public class QueryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.QueryStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleSelectQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJoinQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNestedQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QueryStatement:
		//    SimpleSelectQuery|
		//    JoinQuery |
		//    NestedQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleSelectQuery|
		//JoinQuery |
		//NestedQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleSelectQuery
		public RuleCall getSimpleSelectQueryParserRuleCall_0() { return cSimpleSelectQueryParserRuleCall_0; }
		
		//JoinQuery
		public RuleCall getJoinQueryParserRuleCall_1() { return cJoinQueryParserRuleCall_1; }
		
		//NestedQuery
		public RuleCall getNestedQueryParserRuleCall_2() { return cNestedQueryParserRuleCall_2; }
	}
	public class ManipulateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.ManipulateStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInsertParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeleteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ManipulateStatement:
		//    Insert|
		//    Update|
		//    Delete
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Insert|
		//Update|
		//Delete
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_0() { return cInsertParserRuleCall_0; }
		
		//Update
		public RuleCall getUpdateParserRuleCall_1() { return cUpdateParserRuleCall_1; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_2() { return cDeleteParserRuleCall_2; }
	}
	public class MultiTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.MultiType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStrLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRinLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MultiType:
		//     StrLiteral| RinLiteral| NumLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StrLiteral| RinLiteral| NumLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StrLiteral
		public RuleCall getStrLiteralParserRuleCall_0() { return cStrLiteralParserRuleCall_0; }
		
		//RinLiteral
		public RuleCall getRinLiteralParserRuleCall_1() { return cRinLiteralParserRuleCall_1; }
		
		//NumLiteral
		public RuleCall getNumLiteralParserRuleCall_2() { return cNumLiteralParserRuleCall_2; }
	}
	public class NumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.NumLiteral");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarINTTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//NumLiteral:
		//    var =INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var =INT
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//INT
		public RuleCall getVarINTTerminalRuleCall_0() { return cVarINTTerminalRuleCall_0; }
	}
	public class StrLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.StrLiteral");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//StrLiteral:
		//    var =ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var =ID
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0() { return cVarIDTerminalRuleCall_0; }
	}
	public class RinLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.RinLiteral");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarSTRINGTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//RinLiteral:
		//    var = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = STRING
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//STRING
		public RuleCall getVarSTRINGTerminalRuleCall_0() { return cVarSTRINGTerminalRuleCall_0; }
	}
	public class TableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.TableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TableDeclaration:
		//    'Table'  name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Table'  name = ID
		public Group getGroup() { return cGroup; }
		
		//'Table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SingleSelectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.SingleSelectDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSingleSelectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSingleSelectSimpleSelectQueryParserRuleCall_3_0 = (RuleCall)cSingleSelectAssignment_3.eContents().get(0);
		
		////Assign a simple query to a variable
		//SingleSelectDeclaration:
		//    'var' name =ID "="  singleSelect =SimpleSelectQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name =ID "="  singleSelect =SimpleSelectQuery
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name =ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//singleSelect =SimpleSelectQuery
		public Assignment getSingleSelectAssignment_3() { return cSingleSelectAssignment_3; }
		
		//SimpleSelectQuery
		public RuleCall getSingleSelectSimpleSelectQueryParserRuleCall_3_0() { return cSingleSelectSimpleSelectQueryParserRuleCall_3_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueMultiTypeParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cSeparationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSeparationCommaKeyword_1_0 = (Keyword)cSeparationAssignment_1.eContents().get(0);
		
		////representing an attribute or a value
		//Value:
		//    value = MultiType  (separation +=',')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = MultiType  (separation +=',')*
		public Group getGroup() { return cGroup; }
		
		//value = MultiType
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//MultiType
		public RuleCall getValueMultiTypeParserRuleCall_0_0() { return cValueMultiTypeParserRuleCall_0_0; }
		
		//(separation +=',')*
		public Assignment getSeparationAssignment_1() { return cSeparationAssignment_1; }
		
		//','
		public Keyword getSeparationCommaKeyword_1_0() { return cSeparationCommaKeyword_1_0; }
	}
	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeIDTerminalRuleCall_0_0 = (RuleCall)cAttributeAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueMultiTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cSeparationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSeparationCommaKeyword_3_0 = (Keyword)cSeparationAssignment_3.eContents().get(0);
		
		//Equation:
		//    attribute = ID operator =Operator value=MultiType (separation +=',')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute = ID operator =Operator value=MultiType (separation +=',')*
		public Group getGroup() { return cGroup; }
		
		//attribute = ID
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_0_0() { return cAttributeIDTerminalRuleCall_0_0; }
		
		//operator =Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }
		
		//value=MultiType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//MultiType
		public RuleCall getValueMultiTypeParserRuleCall_2_0() { return cValueMultiTypeParserRuleCall_2_0; }
		
		//(separation +=',')*
		public Assignment getSeparationAssignment_3() { return cSeparationAssignment_3; }
		
		//','
		public Keyword getSeparationCommaKeyword_3_0() { return cSeparationCommaKeyword_3_0; }
	}
	public class VvalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Vvalue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTableTableDeclarationCrossReference_0_0 = (CrossReference)cTableAssignment_0.eContents().get(0);
		private final RuleCall cTableTableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTableTableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeMultiTypeParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		private final Assignment cSeparationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSeparationCommaKeyword_3_0 = (Keyword)cSeparationAssignment_3.eContents().get(0);
		
		////representing a form likes: Table.attribute
		//Vvalue:
		//    table = [TableDeclaration] '-' attribute =MultiType   (separation +=',')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//table = [TableDeclaration] '-' attribute =MultiType   (separation +=',')*
		public Group getGroup() { return cGroup; }
		
		//table = [TableDeclaration]
		public Assignment getTableAssignment_0() { return cTableAssignment_0; }
		
		//[TableDeclaration]
		public CrossReference getTableTableDeclarationCrossReference_0_0() { return cTableTableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTableTableDeclarationIDTerminalRuleCall_0_0_1() { return cTableTableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//attribute =MultiType
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//MultiType
		public RuleCall getAttributeMultiTypeParserRuleCall_2_0() { return cAttributeMultiTypeParserRuleCall_2_0; }
		
		//(separation +=',')*
		public Assignment getSeparationAssignment_3() { return cSeparationAssignment_3; }
		
		//','
		public Keyword getSeparationCommaKeyword_3_0() { return cSeparationCommaKeyword_3_0; }
	}
	public class MultiEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.MultiEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEquationLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEquationLeftVvalueParserRuleCall_0_0 = (RuleCall)cEquationLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cEquationRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEquationRightVvalueParserRuleCall_2_0 = (RuleCall)cEquationRightAssignment_2.eContents().get(0);
		
		////Set connection conditions when connecting multiple tables:   table1.attribute1 = table2.attribute2
		//MultiEquation:
		//    EquationLeft =Vvalue  operator =Operator EquationRight =Vvalue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EquationLeft =Vvalue  operator =Operator EquationRight =Vvalue
		public Group getGroup() { return cGroup; }
		
		//EquationLeft =Vvalue
		public Assignment getEquationLeftAssignment_0() { return cEquationLeftAssignment_0; }
		
		//Vvalue
		public RuleCall getEquationLeftVvalueParserRuleCall_0_0() { return cEquationLeftVvalueParserRuleCall_0_0; }
		
		//operator =Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }
		
		//EquationRight =Vvalue
		public Assignment getEquationRightAssignment_2() { return cEquationRightAssignment_2; }
		
		//Vvalue
		public RuleCall getEquationRightVvalueParserRuleCall_2_0() { return cEquationRightVvalueParserRuleCall_2_0; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTableTableDeclarationCrossReference_0_0 = (CrossReference)cTableAssignment_0.eContents().get(0);
		private final RuleCall cTableTableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTableTableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cInsertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInsert_dataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInsert_dataValueParserRuleCall_2_0 = (RuleCall)cInsert_dataAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Insert:
		//    table =[TableDeclaration] '.Insert(' insert_data += Value*  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//table =[TableDeclaration] '.Insert(' insert_data += Value*  ')'
		public Group getGroup() { return cGroup; }
		
		//table =[TableDeclaration]
		public Assignment getTableAssignment_0() { return cTableAssignment_0; }
		
		//[TableDeclaration]
		public CrossReference getTableTableDeclarationCrossReference_0_0() { return cTableTableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTableTableDeclarationIDTerminalRuleCall_0_0_1() { return cTableTableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.Insert('
		public Keyword getInsertKeyword_1() { return cInsertKeyword_1; }
		
		//insert_data += Value*
		public Assignment getInsert_dataAssignment_2() { return cInsert_dataAssignment_2; }
		
		//Value
		public RuleCall getInsert_dataValueParserRuleCall_2_0() { return cInsert_dataValueParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTableTableDeclarationCrossReference_0_0 = (CrossReference)cTableAssignment_0.eContents().get(0);
		private final RuleCall cTableTableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTableTableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cUpdateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModificationEquationParserRuleCall_2_0 = (RuleCall)cModificationAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUpdateconditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpdateconditionEquationParserRuleCall_5_0 = (RuleCall)cUpdateconditionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Update:
		//    table =[TableDeclaration] '.Update(' modification+= Equation* ')'  '.Condition(' updatecondition+= Equation*  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//table =[TableDeclaration] '.Update(' modification+= Equation* ')'  '.Condition(' updatecondition+= Equation*  ')'
		public Group getGroup() { return cGroup; }
		
		//table =[TableDeclaration]
		public Assignment getTableAssignment_0() { return cTableAssignment_0; }
		
		//[TableDeclaration]
		public CrossReference getTableTableDeclarationCrossReference_0_0() { return cTableTableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTableTableDeclarationIDTerminalRuleCall_0_0_1() { return cTableTableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.Update('
		public Keyword getUpdateKeyword_1() { return cUpdateKeyword_1; }
		
		//modification+= Equation*
		public Assignment getModificationAssignment_2() { return cModificationAssignment_2; }
		
		//Equation
		public RuleCall getModificationEquationParserRuleCall_2_0() { return cModificationEquationParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'.Condition('
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//updatecondition+= Equation*
		public Assignment getUpdateconditionAssignment_5() { return cUpdateconditionAssignment_5; }
		
		//Equation
		public RuleCall getUpdateconditionEquationParserRuleCall_5_0() { return cUpdateconditionEquationParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTableTableDeclarationCrossReference_0_0 = (CrossReference)cTableAssignment_0.eContents().get(0);
		private final RuleCall cTableTableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTableTableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cDeleteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeleteconditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeleteconditionEquationParserRuleCall_2_0 = (RuleCall)cDeleteconditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Delete:
		//    table =[TableDeclaration]  '.Delete(' deletecondition+= Equation* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//table =[TableDeclaration]  '.Delete(' deletecondition+= Equation* ')'
		public Group getGroup() { return cGroup; }
		
		//table =[TableDeclaration]
		public Assignment getTableAssignment_0() { return cTableAssignment_0; }
		
		//[TableDeclaration]
		public CrossReference getTableTableDeclarationCrossReference_0_0() { return cTableTableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTableTableDeclarationIDTerminalRuleCall_0_0_1() { return cTableTableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.Delete('
		public Keyword getDeleteKeyword_1() { return cDeleteKeyword_1; }
		
		//deletecondition+= Equation*
		public Assignment getDeleteconditionAssignment_2() { return cDeleteconditionAssignment_2; }
		
		//Equation
		public RuleCall getDeleteconditionEquationParserRuleCall_2_0() { return cDeleteconditionEquationParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SimpleSelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.SimpleSelectQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStableTableDeclarationCrossReference_0_0 = (CrossReference)cStableAssignment_0.eContents().get(0);
		private final RuleCall cStableTableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cStableTableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cSearchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSattributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSattributesValueParserRuleCall_2_0 = (RuleCall)cSattributesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSimpleconditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSimpleconditionEquationParserRuleCall_5_0 = (RuleCall)cSimpleconditionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRemoveDupAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cRemoveDupRemoveDuplicationKeyword_7_0 = (Keyword)cRemoveDupAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFullStopKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOrdertypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOrdertypeOrderEnumRuleCall_8_1_0 = (RuleCall)cOrdertypeAssignment_8_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cSCattributesAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cSCattributesValueParserRuleCall_8_3_0 = (RuleCall)cSCattributesAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		//SimpleSelectQuery:
		//    Stable =[TableDeclaration]  '.Search(' (Sattributes+= Value)* ')' '.Condition('(simplecondition+= Equation)*')'  (removeDup +='.RemoveDuplication()')? ("." ordertype =Order "(" (SCattributes+= Value)* ")" )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Stable =[TableDeclaration]  '.Search(' (Sattributes+= Value)* ')' '.Condition('(simplecondition+= Equation)*')'  (removeDup +='.RemoveDuplication()')? ("." ordertype =Order "(" (SCattributes+= Value)* ")" )?
		public Group getGroup() { return cGroup; }
		
		//Stable =[TableDeclaration]
		public Assignment getStableAssignment_0() { return cStableAssignment_0; }
		
		//[TableDeclaration]
		public CrossReference getStableTableDeclarationCrossReference_0_0() { return cStableTableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getStableTableDeclarationIDTerminalRuleCall_0_0_1() { return cStableTableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.Search('
		public Keyword getSearchKeyword_1() { return cSearchKeyword_1; }
		
		//(Sattributes+= Value)*
		public Assignment getSattributesAssignment_2() { return cSattributesAssignment_2; }
		
		//Value
		public RuleCall getSattributesValueParserRuleCall_2_0() { return cSattributesValueParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'.Condition('
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//(simplecondition+= Equation)*
		public Assignment getSimpleconditionAssignment_5() { return cSimpleconditionAssignment_5; }
		
		//Equation
		public RuleCall getSimpleconditionEquationParserRuleCall_5_0() { return cSimpleconditionEquationParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//(removeDup +='.RemoveDuplication()')?
		public Assignment getRemoveDupAssignment_7() { return cRemoveDupAssignment_7; }
		
		//'.RemoveDuplication()'
		public Keyword getRemoveDupRemoveDuplicationKeyword_7_0() { return cRemoveDupRemoveDuplicationKeyword_7_0; }
		
		//("." ordertype =Order "(" (SCattributes+= Value)* ")" )?
		public Group getGroup_8() { return cGroup_8; }
		
		//"."
		public Keyword getFullStopKeyword_8_0() { return cFullStopKeyword_8_0; }
		
		//ordertype =Order
		public Assignment getOrdertypeAssignment_8_1() { return cOrdertypeAssignment_8_1; }
		
		//Order
		public RuleCall getOrdertypeOrderEnumRuleCall_8_1_0() { return cOrdertypeOrderEnumRuleCall_8_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//(SCattributes+= Value)*
		public Assignment getSCattributesAssignment_8_3() { return cSCattributesAssignment_8_3; }
		
		//Value
		public RuleCall getSCattributesValueParserRuleCall_8_3_0() { return cSCattributesValueParserRuleCall_8_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
	}
	public class JoinQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.JoinQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJtable1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cJtable1TableDeclarationCrossReference_0_0 = (CrossReference)cJtable1Assignment_0.eContents().get(0);
		private final RuleCall cJtable1TableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cJtable1TableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cJoinsearchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJattributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJattributesVvalueParserRuleCall_2_0 = (RuleCall)cJattributesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cJointypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cJointypeJoinEnumRuleCall_5_0 = (RuleCall)cJointypeAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cJtable2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cJtable2TableDeclarationCrossReference_7_0 = (CrossReference)cJtable2Assignment_7.eContents().get(0);
		private final RuleCall cJtable2TableDeclarationIDTerminalRuleCall_7_0_1 = (RuleCall)cJtable2TableDeclarationCrossReference_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cOnKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cJoinconditionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cJoinconditionMultiEquationParserRuleCall_10_0 = (RuleCall)cJoinconditionAssignment_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//JoinQuery:
		//    Jtable1 =[TableDeclaration] '.Joinsearch(' (Jattributes+= Vvalue)*  ')' '.' jointype=Join '(' Jtable2 =[TableDeclaration] ')' '.On(' (joincondition+= MultiEquation)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Jtable1 =[TableDeclaration] '.Joinsearch(' (Jattributes+= Vvalue)*  ')' '.' jointype=Join '(' Jtable2 =[TableDeclaration] ')' '.On(' (joincondition+= MultiEquation)* ')'
		public Group getGroup() { return cGroup; }
		
		//Jtable1 =[TableDeclaration]
		public Assignment getJtable1Assignment_0() { return cJtable1Assignment_0; }
		
		//[TableDeclaration]
		public CrossReference getJtable1TableDeclarationCrossReference_0_0() { return cJtable1TableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getJtable1TableDeclarationIDTerminalRuleCall_0_0_1() { return cJtable1TableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.Joinsearch('
		public Keyword getJoinsearchKeyword_1() { return cJoinsearchKeyword_1; }
		
		//(Jattributes+= Vvalue)*
		public Assignment getJattributesAssignment_2() { return cJattributesAssignment_2; }
		
		//Vvalue
		public RuleCall getJattributesVvalueParserRuleCall_2_0() { return cJattributesVvalueParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//jointype=Join
		public Assignment getJointypeAssignment_5() { return cJointypeAssignment_5; }
		
		//Join
		public RuleCall getJointypeJoinEnumRuleCall_5_0() { return cJointypeJoinEnumRuleCall_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//Jtable2 =[TableDeclaration]
		public Assignment getJtable2Assignment_7() { return cJtable2Assignment_7; }
		
		//[TableDeclaration]
		public CrossReference getJtable2TableDeclarationCrossReference_7_0() { return cJtable2TableDeclarationCrossReference_7_0; }
		
		//ID
		public RuleCall getJtable2TableDeclarationIDTerminalRuleCall_7_0_1() { return cJtable2TableDeclarationIDTerminalRuleCall_7_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'.On('
		public Keyword getOnKeyword_9() { return cOnKeyword_9; }
		
		//(joincondition+= MultiEquation)*
		public Assignment getJoinconditionAssignment_10() { return cJoinconditionAssignment_10; }
		
		//MultiEquation
		public RuleCall getJoinconditionMultiEquationParserRuleCall_10_0() { return cJoinconditionMultiEquationParserRuleCall_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class NestedQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.NestedQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNtableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNtableTableDeclarationCrossReference_0_0 = (CrossReference)cNtableAssignment_0.eContents().get(0);
		private final RuleCall cNtableTableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cNtableTableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cSubsearchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNattributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNattributesValueParserRuleCall_2_0 = (RuleCall)cNattributesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNattributes1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNattributes1ValueParserRuleCall_5_0 = (RuleCall)cNattributes1Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cInKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSubselectqueryAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cSubselectquerySingleSelectDeclarationCrossReference_8_0 = (CrossReference)cSubselectqueryAssignment_8.eContents().get(0);
		private final RuleCall cSubselectquerySingleSelectDeclarationIDTerminalRuleCall_8_0_1 = (RuleCall)cSubselectquerySingleSelectDeclarationCrossReference_8_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//NestedQuery:
		//    Ntable = [TableDeclaration] '.Subsearch('  Nattributes+= Value* ')' '.When(' Nattributes1 += Value* ')' '.In('  subselectquery =[SingleSelectDeclaration] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Ntable = [TableDeclaration] '.Subsearch('  Nattributes+= Value* ')' '.When(' Nattributes1 += Value* ')' '.In('  subselectquery =[SingleSelectDeclaration] ')'
		public Group getGroup() { return cGroup; }
		
		//Ntable = [TableDeclaration]
		public Assignment getNtableAssignment_0() { return cNtableAssignment_0; }
		
		//[TableDeclaration]
		public CrossReference getNtableTableDeclarationCrossReference_0_0() { return cNtableTableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getNtableTableDeclarationIDTerminalRuleCall_0_0_1() { return cNtableTableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.Subsearch('
		public Keyword getSubsearchKeyword_1() { return cSubsearchKeyword_1; }
		
		//Nattributes+= Value*
		public Assignment getNattributesAssignment_2() { return cNattributesAssignment_2; }
		
		//Value
		public RuleCall getNattributesValueParserRuleCall_2_0() { return cNattributesValueParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'.When('
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }
		
		//Nattributes1 += Value*
		public Assignment getNattributes1Assignment_5() { return cNattributes1Assignment_5; }
		
		//Value
		public RuleCall getNattributes1ValueParserRuleCall_5_0() { return cNattributes1ValueParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'.In('
		public Keyword getInKeyword_7() { return cInKeyword_7; }
		
		//subselectquery =[SingleSelectDeclaration]
		public Assignment getSubselectqueryAssignment_8() { return cSubselectqueryAssignment_8; }
		
		//[SingleSelectDeclaration]
		public CrossReference getSubselectquerySingleSelectDeclarationCrossReference_8_0() { return cSubselectquerySingleSelectDeclarationCrossReference_8_0; }
		
		//ID
		public RuleCall getSubselectquerySingleSelectDeclarationIDTerminalRuleCall_8_0_1() { return cSubselectquerySingleSelectDeclarationIDTerminalRuleCall_8_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVaEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVaGreaterThanSignKeyword_0_0 = (Keyword)cVaEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVbEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVbLessThanSignKeyword_1_0 = (Keyword)cVbEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVcEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVcGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cVcEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cVdEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cVdLessThanSignEqualsSignKeyword_3_0 = (Keyword)cVdEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVeExclamationMarkEqualsSignKeyword_4_0 = (Keyword)cVeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cVfEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cVfEqualsSignKeyword_5_0 = (Keyword)cVfEnumLiteralDeclaration_5.eContents().get(0);
		
		////Including various operators：>   <    >=    <=   !=   =
		//enum Operator:
		//    va = '>'  |  vb = '<' |  vc = '>=' |  vd = '<=' | ve ='!='  | vf = '='
		//;
		public EnumRule getRule() { return rule; }
		
		//va = '>'  |  vb = '<' |  vc = '>=' |  vd = '<=' | ve ='!='  | vf = '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//va = '>'
		public EnumLiteralDeclaration getVaEnumLiteralDeclaration_0() { return cVaEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getVaGreaterThanSignKeyword_0_0() { return cVaGreaterThanSignKeyword_0_0; }
		
		//vb = '<'
		public EnumLiteralDeclaration getVbEnumLiteralDeclaration_1() { return cVbEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getVbLessThanSignKeyword_1_0() { return cVbLessThanSignKeyword_1_0; }
		
		//vc = '>='
		public EnumLiteralDeclaration getVcEnumLiteralDeclaration_2() { return cVcEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getVcGreaterThanSignEqualsSignKeyword_2_0() { return cVcGreaterThanSignEqualsSignKeyword_2_0; }
		
		//vd = '<='
		public EnumLiteralDeclaration getVdEnumLiteralDeclaration_3() { return cVdEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getVdLessThanSignEqualsSignKeyword_3_0() { return cVdLessThanSignEqualsSignKeyword_3_0; }
		
		//ve ='!='
		public EnumLiteralDeclaration getVeEnumLiteralDeclaration_4() { return cVeEnumLiteralDeclaration_4; }
		
		//'!='
		public Keyword getVeExclamationMarkEqualsSignKeyword_4_0() { return cVeExclamationMarkEqualsSignKeyword_4_0; }
		
		//vf = '='
		public EnumLiteralDeclaration getVfEnumLiteralDeclaration_5() { return cVfEnumLiteralDeclaration_5; }
		
		//'='
		public Keyword getVfEqualsSignKeyword_5_0() { return cVfEqualsSignKeyword_5_0; }
	}
	public class JoinElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Join");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeft_joinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeft_joinLeft_joinKeyword_0_0 = (Keyword)cLeft_joinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRight_joinEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRight_joinRight_joinKeyword_1_0 = (Keyword)cRight_joinEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFull_joinEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFull_joinFull_joinKeyword_2_0 = (Keyword)cFull_joinEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInner_joinEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInner_joinInner_joinKeyword_3_0 = (Keyword)cInner_joinEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Join:
		//     left_join | right_join | full_join | inner_join
		//;
		public EnumRule getRule() { return rule; }
		
		//left_join | right_join | full_join | inner_join
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left_join
		public EnumLiteralDeclaration getLeft_joinEnumLiteralDeclaration_0() { return cLeft_joinEnumLiteralDeclaration_0; }
		
		public Keyword getLeft_joinLeft_joinKeyword_0_0() { return cLeft_joinLeft_joinKeyword_0_0; }
		
		//right_join
		public EnumLiteralDeclaration getRight_joinEnumLiteralDeclaration_1() { return cRight_joinEnumLiteralDeclaration_1; }
		
		public Keyword getRight_joinRight_joinKeyword_1_0() { return cRight_joinRight_joinKeyword_1_0; }
		
		//full_join
		public EnumLiteralDeclaration getFull_joinEnumLiteralDeclaration_2() { return cFull_joinEnumLiteralDeclaration_2; }
		
		public Keyword getFull_joinFull_joinKeyword_2_0() { return cFull_joinFull_joinKeyword_2_0; }
		
		//inner_join
		public EnumLiteralDeclaration getInner_joinEnumLiteralDeclaration_3() { return cInner_joinEnumLiteralDeclaration_3; }
		
		public Keyword getInner_joinInner_joinKeyword_3_0() { return cInner_joinInner_joinKeyword_3_0; }
	}
	public class OrderElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group19.easySql.EasySql.Order");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAscendingEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAscendingAscendingKeyword_0_0 = (Keyword)cAscendingEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDescendingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDescendingDescendingKeyword_1_0 = (Keyword)cDescendingEnumLiteralDeclaration_1.eContents().get(0);
		
		////Is it in ascending or descending order
		//enum Order:
		//    ascending | descending
		//;
		public EnumRule getRule() { return rule; }
		
		//ascending | descending
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ascending
		public EnumLiteralDeclaration getAscendingEnumLiteralDeclaration_0() { return cAscendingEnumLiteralDeclaration_0; }
		
		public Keyword getAscendingAscendingKeyword_0_0() { return cAscendingAscendingKeyword_0_0; }
		
		//descending
		public EnumLiteralDeclaration getDescendingEnumLiteralDeclaration_1() { return cDescendingEnumLiteralDeclaration_1; }
		
		public Keyword getDescendingDescendingKeyword_1_0() { return cDescendingDescendingKeyword_1_0; }
	}
	
	private final SqlProgramElements pSqlProgram;
	private final StatementElements pStatement;
	private final QueryStatementElements pQueryStatement;
	private final ManipulateStatementElements pManipulateStatement;
	private final MultiTypeElements pMultiType;
	private final NumLiteralElements pNumLiteral;
	private final StrLiteralElements pStrLiteral;
	private final RinLiteralElements pRinLiteral;
	private final OperatorElements eOperator;
	private final JoinElements eJoin;
	private final TableDeclarationElements pTableDeclaration;
	private final SingleSelectDeclarationElements pSingleSelectDeclaration;
	private final ValueElements pValue;
	private final EquationElements pEquation;
	private final VvalueElements pVvalue;
	private final MultiEquationElements pMultiEquation;
	private final OrderElements eOrder;
	private final InsertElements pInsert;
	private final UpdateElements pUpdate;
	private final DeleteElements pDelete;
	private final SimpleSelectQueryElements pSimpleSelectQuery;
	private final JoinQueryElements pJoinQuery;
	private final NestedQueryElements pNestedQuery;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EasySqlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSqlProgram = new SqlProgramElements();
		this.pStatement = new StatementElements();
		this.pQueryStatement = new QueryStatementElements();
		this.pManipulateStatement = new ManipulateStatementElements();
		this.pMultiType = new MultiTypeElements();
		this.pNumLiteral = new NumLiteralElements();
		this.pStrLiteral = new StrLiteralElements();
		this.pRinLiteral = new RinLiteralElements();
		this.eOperator = new OperatorElements();
		this.eJoin = new JoinElements();
		this.pTableDeclaration = new TableDeclarationElements();
		this.pSingleSelectDeclaration = new SingleSelectDeclarationElements();
		this.pValue = new ValueElements();
		this.pEquation = new EquationElements();
		this.pVvalue = new VvalueElements();
		this.pMultiEquation = new MultiEquationElements();
		this.eOrder = new OrderElements();
		this.pInsert = new InsertElements();
		this.pUpdate = new UpdateElements();
		this.pDelete = new DeleteElements();
		this.pSimpleSelectQuery = new SimpleSelectQueryElements();
		this.pJoinQuery = new JoinQueryElements();
		this.pNestedQuery = new NestedQueryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.group19.easySql.EasySql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SqlProgram:
	//    statements += Statement *
	//;
	public SqlProgramElements getSqlProgramAccess() {
		return pSqlProgram;
	}
	
	public ParserRule getSqlProgramRule() {
		return getSqlProgramAccess().getRule();
	}
	
	//Statement:
	//     QueryStatement| ManipulateStatement| TableDeclaration | SingleSelectDeclaration
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//QueryStatement:
	//    SimpleSelectQuery|
	//    JoinQuery |
	//    NestedQuery
	//;
	public QueryStatementElements getQueryStatementAccess() {
		return pQueryStatement;
	}
	
	public ParserRule getQueryStatementRule() {
		return getQueryStatementAccess().getRule();
	}
	
	//ManipulateStatement:
	//    Insert|
	//    Update|
	//    Delete
	//;
	public ManipulateStatementElements getManipulateStatementAccess() {
		return pManipulateStatement;
	}
	
	public ParserRule getManipulateStatementRule() {
		return getManipulateStatementAccess().getRule();
	}
	
	//MultiType:
	//     StrLiteral| RinLiteral| NumLiteral
	//;
	public MultiTypeElements getMultiTypeAccess() {
		return pMultiType;
	}
	
	public ParserRule getMultiTypeRule() {
		return getMultiTypeAccess().getRule();
	}
	
	//NumLiteral:
	//    var =INT
	//;
	public NumLiteralElements getNumLiteralAccess() {
		return pNumLiteral;
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}
	
	//StrLiteral:
	//    var =ID
	//;
	public StrLiteralElements getStrLiteralAccess() {
		return pStrLiteral;
	}
	
	public ParserRule getStrLiteralRule() {
		return getStrLiteralAccess().getRule();
	}
	
	//RinLiteral:
	//    var = STRING
	//;
	public RinLiteralElements getRinLiteralAccess() {
		return pRinLiteral;
	}
	
	public ParserRule getRinLiteralRule() {
		return getRinLiteralAccess().getRule();
	}
	
	////Including various operators：>   <    >=    <=   !=   =
	//enum Operator:
	//    va = '>'  |  vb = '<' |  vc = '>=' |  vd = '<=' | ve ='!='  | vf = '='
	//;
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//enum Join:
	//     left_join | right_join | full_join | inner_join
	//;
	public JoinElements getJoinAccess() {
		return eJoin;
	}
	
	public EnumRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//TableDeclaration:
	//    'Table'  name = ID
	//;
	public TableDeclarationElements getTableDeclarationAccess() {
		return pTableDeclaration;
	}
	
	public ParserRule getTableDeclarationRule() {
		return getTableDeclarationAccess().getRule();
	}
	
	////Assign a simple query to a variable
	//SingleSelectDeclaration:
	//    'var' name =ID "="  singleSelect =SimpleSelectQuery
	//;
	public SingleSelectDeclarationElements getSingleSelectDeclarationAccess() {
		return pSingleSelectDeclaration;
	}
	
	public ParserRule getSingleSelectDeclarationRule() {
		return getSingleSelectDeclarationAccess().getRule();
	}
	
	////representing an attribute or a value
	//Value:
	//    value = MultiType  (separation +=',')*
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Equation:
	//    attribute = ID operator =Operator value=MultiType (separation +=',')*
	//;
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}
	
	////representing a form likes: Table.attribute
	//Vvalue:
	//    table = [TableDeclaration] '-' attribute =MultiType   (separation +=',')*
	//;
	public VvalueElements getVvalueAccess() {
		return pVvalue;
	}
	
	public ParserRule getVvalueRule() {
		return getVvalueAccess().getRule();
	}
	
	////Set connection conditions when connecting multiple tables:   table1.attribute1 = table2.attribute2
	//MultiEquation:
	//    EquationLeft =Vvalue  operator =Operator EquationRight =Vvalue
	//;
	public MultiEquationElements getMultiEquationAccess() {
		return pMultiEquation;
	}
	
	public ParserRule getMultiEquationRule() {
		return getMultiEquationAccess().getRule();
	}
	
	////Is it in ascending or descending order
	//enum Order:
	//    ascending | descending
	//;
	public OrderElements getOrderAccess() {
		return eOrder;
	}
	
	public EnumRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//Insert:
	//    table =[TableDeclaration] '.Insert(' insert_data += Value*  ')'
	//;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Update:
	//    table =[TableDeclaration] '.Update(' modification+= Equation* ')'  '.Condition(' updatecondition+= Equation*  ')'
	//;
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//Delete:
	//    table =[TableDeclaration]  '.Delete(' deletecondition+= Equation* ')'
	//;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//SimpleSelectQuery:
	//    Stable =[TableDeclaration]  '.Search(' (Sattributes+= Value)* ')' '.Condition('(simplecondition+= Equation)*')'  (removeDup +='.RemoveDuplication()')? ("." ordertype =Order "(" (SCattributes+= Value)* ")" )?
	//;
	public SimpleSelectQueryElements getSimpleSelectQueryAccess() {
		return pSimpleSelectQuery;
	}
	
	public ParserRule getSimpleSelectQueryRule() {
		return getSimpleSelectQueryAccess().getRule();
	}
	
	//JoinQuery:
	//    Jtable1 =[TableDeclaration] '.Joinsearch(' (Jattributes+= Vvalue)*  ')' '.' jointype=Join '(' Jtable2 =[TableDeclaration] ')' '.On(' (joincondition+= MultiEquation)* ')'
	//;
	public JoinQueryElements getJoinQueryAccess() {
		return pJoinQuery;
	}
	
	public ParserRule getJoinQueryRule() {
		return getJoinQueryAccess().getRule();
	}
	
	//NestedQuery:
	//    Ntable = [TableDeclaration] '.Subsearch('  Nattributes+= Value* ')' '.When(' Nattributes1 += Value* ')' '.In('  subselectquery =[SingleSelectDeclaration] ')'
	//;
	public NestedQueryElements getNestedQueryAccess() {
		return pNestedQuery;
	}
	
	public ParserRule getNestedQueryRule() {
		return getNestedQueryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
