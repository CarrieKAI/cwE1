/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.easySql.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import uk.ac.kcl.inf.group19.easySql.easySql.Delete;
import uk.ac.kcl.inf.group19.easySql.easySql.EasySqlFactory;
import uk.ac.kcl.inf.group19.easySql.easySql.EasySqlPackage;
import uk.ac.kcl.inf.group19.easySql.easySql.Equation;
import uk.ac.kcl.inf.group19.easySql.easySql.Insert;
import uk.ac.kcl.inf.group19.easySql.easySql.Join;
import uk.ac.kcl.inf.group19.easySql.easySql.JoinQuery;
import uk.ac.kcl.inf.group19.easySql.easySql.ManipulateStatement;
import uk.ac.kcl.inf.group19.easySql.easySql.MultiEquation;
import uk.ac.kcl.inf.group19.easySql.easySql.MultiType;
import uk.ac.kcl.inf.group19.easySql.easySql.NestedQuery;
import uk.ac.kcl.inf.group19.easySql.easySql.NumLiteral;
import uk.ac.kcl.inf.group19.easySql.easySql.Operator;
import uk.ac.kcl.inf.group19.easySql.easySql.Order;
import uk.ac.kcl.inf.group19.easySql.easySql.QueryStatement;
import uk.ac.kcl.inf.group19.easySql.easySql.RinLiteral;
import uk.ac.kcl.inf.group19.easySql.easySql.SimpleSelectQuery;
import uk.ac.kcl.inf.group19.easySql.easySql.SingleSelectDeclaration;
import uk.ac.kcl.inf.group19.easySql.easySql.SqlProgram;
import uk.ac.kcl.inf.group19.easySql.easySql.Statement;
import uk.ac.kcl.inf.group19.easySql.easySql.StrLiteral;
import uk.ac.kcl.inf.group19.easySql.easySql.TableDeclaration;
import uk.ac.kcl.inf.group19.easySql.easySql.Update;
import uk.ac.kcl.inf.group19.easySql.easySql.Value;
import uk.ac.kcl.inf.group19.easySql.easySql.Vvalue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EasySqlPackageImpl extends EPackageImpl implements EasySqlPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sqlProgramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass queryStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass manipulateStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass strLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rinLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tableDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleSelectDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass equationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vvalueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiEquationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass insertEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass updateEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deleteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleSelectQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass joinQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nestedQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum operatorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum joinEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum orderEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see uk.ac.kcl.inf.group19.easySql.easySql.EasySqlPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private EasySqlPackageImpl()
  {
    super(eNS_URI, EasySqlFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link EasySqlPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static EasySqlPackage init()
  {
    if (isInited) return (EasySqlPackage)EPackage.Registry.INSTANCE.getEPackage(EasySqlPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredEasySqlPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    EasySqlPackageImpl theEasySqlPackage = registeredEasySqlPackage instanceof EasySqlPackageImpl ? (EasySqlPackageImpl)registeredEasySqlPackage : new EasySqlPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theEasySqlPackage.createPackageContents();

    // Initialize created meta-data
    theEasySqlPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theEasySqlPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(EasySqlPackage.eNS_URI, theEasySqlPackage);
    return theEasySqlPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSqlProgram()
  {
    return sqlProgramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSqlProgram_Statements()
  {
    return (EReference)sqlProgramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getQueryStatement()
  {
    return queryStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getManipulateStatement()
  {
    return manipulateStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getManipulateStatement_Table()
  {
    return (EReference)manipulateStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultiType()
  {
    return multiTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNumLiteral()
  {
    return numLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNumLiteral_Var()
  {
    return (EAttribute)numLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStrLiteral()
  {
    return strLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStrLiteral_Var()
  {
    return (EAttribute)strLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRinLiteral()
  {
    return rinLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRinLiteral_Var()
  {
    return (EAttribute)rinLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTableDeclaration()
  {
    return tableDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTableDeclaration_Name()
  {
    return (EAttribute)tableDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSingleSelectDeclaration()
  {
    return singleSelectDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSingleSelectDeclaration_Name()
  {
    return (EAttribute)singleSelectDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSingleSelectDeclaration_SingleSelect()
  {
    return (EReference)singleSelectDeclarationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValue()
  {
    return valueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValue_Value()
  {
    return (EReference)valueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValue_Separation()
  {
    return (EAttribute)valueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEquation()
  {
    return equationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEquation_Attribute()
  {
    return (EAttribute)equationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEquation_Operator()
  {
    return (EAttribute)equationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEquation_Value()
  {
    return (EReference)equationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEquation_Separation()
  {
    return (EAttribute)equationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVvalue()
  {
    return vvalueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVvalue_Table()
  {
    return (EReference)vvalueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVvalue_Attribute()
  {
    return (EReference)vvalueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVvalue_Separation()
  {
    return (EAttribute)vvalueEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultiEquation()
  {
    return multiEquationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMultiEquation_EquationLeft()
  {
    return (EReference)multiEquationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMultiEquation_Operator()
  {
    return (EAttribute)multiEquationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMultiEquation_EquationRight()
  {
    return (EReference)multiEquationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInsert()
  {
    return insertEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInsert_Insert_data()
  {
    return (EReference)insertEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUpdate()
  {
    return updateEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUpdate_Modification()
  {
    return (EReference)updateEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUpdate_Updatecondition()
  {
    return (EReference)updateEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDelete()
  {
    return deleteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDelete_Deletecondition()
  {
    return (EReference)deleteEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSimpleSelectQuery()
  {
    return simpleSelectQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSimpleSelectQuery_Stable()
  {
    return (EReference)simpleSelectQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSimpleSelectQuery_Sattributes()
  {
    return (EReference)simpleSelectQueryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSimpleSelectQuery_Simplecondition()
  {
    return (EReference)simpleSelectQueryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSimpleSelectQuery_RemoveDup()
  {
    return (EAttribute)simpleSelectQueryEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSimpleSelectQuery_Ordertype()
  {
    return (EAttribute)simpleSelectQueryEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSimpleSelectQuery_SCattributes()
  {
    return (EReference)simpleSelectQueryEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJoinQuery()
  {
    return joinQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJoinQuery_Jtable1()
  {
    return (EReference)joinQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJoinQuery_Jattributes()
  {
    return (EReference)joinQueryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJoinQuery_Jointype()
  {
    return (EAttribute)joinQueryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJoinQuery_Jtable2()
  {
    return (EReference)joinQueryEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJoinQuery_Joincondition()
  {
    return (EReference)joinQueryEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNestedQuery()
  {
    return nestedQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNestedQuery_Ntable()
  {
    return (EReference)nestedQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNestedQuery_Nattributes()
  {
    return (EReference)nestedQueryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNestedQuery_Nattributes1()
  {
    return (EReference)nestedQueryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNestedQuery_Subselectquery()
  {
    return (EReference)nestedQueryEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getOperator()
  {
    return operatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getJoin()
  {
    return joinEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getOrder()
  {
    return orderEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EasySqlFactory getEasySqlFactory()
  {
    return (EasySqlFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    sqlProgramEClass = createEClass(SQL_PROGRAM);
    createEReference(sqlProgramEClass, SQL_PROGRAM__STATEMENTS);

    statementEClass = createEClass(STATEMENT);

    queryStatementEClass = createEClass(QUERY_STATEMENT);

    manipulateStatementEClass = createEClass(MANIPULATE_STATEMENT);
    createEReference(manipulateStatementEClass, MANIPULATE_STATEMENT__TABLE);

    multiTypeEClass = createEClass(MULTI_TYPE);

    numLiteralEClass = createEClass(NUM_LITERAL);
    createEAttribute(numLiteralEClass, NUM_LITERAL__VAR);

    strLiteralEClass = createEClass(STR_LITERAL);
    createEAttribute(strLiteralEClass, STR_LITERAL__VAR);

    rinLiteralEClass = createEClass(RIN_LITERAL);
    createEAttribute(rinLiteralEClass, RIN_LITERAL__VAR);

    tableDeclarationEClass = createEClass(TABLE_DECLARATION);
    createEAttribute(tableDeclarationEClass, TABLE_DECLARATION__NAME);

    singleSelectDeclarationEClass = createEClass(SINGLE_SELECT_DECLARATION);
    createEAttribute(singleSelectDeclarationEClass, SINGLE_SELECT_DECLARATION__NAME);
    createEReference(singleSelectDeclarationEClass, SINGLE_SELECT_DECLARATION__SINGLE_SELECT);

    valueEClass = createEClass(VALUE);
    createEReference(valueEClass, VALUE__VALUE);
    createEAttribute(valueEClass, VALUE__SEPARATION);

    equationEClass = createEClass(EQUATION);
    createEAttribute(equationEClass, EQUATION__ATTRIBUTE);
    createEAttribute(equationEClass, EQUATION__OPERATOR);
    createEReference(equationEClass, EQUATION__VALUE);
    createEAttribute(equationEClass, EQUATION__SEPARATION);

    vvalueEClass = createEClass(VVALUE);
    createEReference(vvalueEClass, VVALUE__TABLE);
    createEReference(vvalueEClass, VVALUE__ATTRIBUTE);
    createEAttribute(vvalueEClass, VVALUE__SEPARATION);

    multiEquationEClass = createEClass(MULTI_EQUATION);
    createEReference(multiEquationEClass, MULTI_EQUATION__EQUATION_LEFT);
    createEAttribute(multiEquationEClass, MULTI_EQUATION__OPERATOR);
    createEReference(multiEquationEClass, MULTI_EQUATION__EQUATION_RIGHT);

    insertEClass = createEClass(INSERT);
    createEReference(insertEClass, INSERT__INSERT_DATA);

    updateEClass = createEClass(UPDATE);
    createEReference(updateEClass, UPDATE__MODIFICATION);
    createEReference(updateEClass, UPDATE__UPDATECONDITION);

    deleteEClass = createEClass(DELETE);
    createEReference(deleteEClass, DELETE__DELETECONDITION);

    simpleSelectQueryEClass = createEClass(SIMPLE_SELECT_QUERY);
    createEReference(simpleSelectQueryEClass, SIMPLE_SELECT_QUERY__STABLE);
    createEReference(simpleSelectQueryEClass, SIMPLE_SELECT_QUERY__SATTRIBUTES);
    createEReference(simpleSelectQueryEClass, SIMPLE_SELECT_QUERY__SIMPLECONDITION);
    createEAttribute(simpleSelectQueryEClass, SIMPLE_SELECT_QUERY__REMOVE_DUP);
    createEAttribute(simpleSelectQueryEClass, SIMPLE_SELECT_QUERY__ORDERTYPE);
    createEReference(simpleSelectQueryEClass, SIMPLE_SELECT_QUERY__SCATTRIBUTES);

    joinQueryEClass = createEClass(JOIN_QUERY);
    createEReference(joinQueryEClass, JOIN_QUERY__JTABLE1);
    createEReference(joinQueryEClass, JOIN_QUERY__JATTRIBUTES);
    createEAttribute(joinQueryEClass, JOIN_QUERY__JOINTYPE);
    createEReference(joinQueryEClass, JOIN_QUERY__JTABLE2);
    createEReference(joinQueryEClass, JOIN_QUERY__JOINCONDITION);

    nestedQueryEClass = createEClass(NESTED_QUERY);
    createEReference(nestedQueryEClass, NESTED_QUERY__NTABLE);
    createEReference(nestedQueryEClass, NESTED_QUERY__NATTRIBUTES);
    createEReference(nestedQueryEClass, NESTED_QUERY__NATTRIBUTES1);
    createEReference(nestedQueryEClass, NESTED_QUERY__SUBSELECTQUERY);

    // Create enums
    operatorEEnum = createEEnum(OPERATOR);
    joinEEnum = createEEnum(JOIN);
    orderEEnum = createEEnum(ORDER);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    queryStatementEClass.getESuperTypes().add(this.getStatement());
    manipulateStatementEClass.getESuperTypes().add(this.getStatement());
    numLiteralEClass.getESuperTypes().add(this.getMultiType());
    strLiteralEClass.getESuperTypes().add(this.getMultiType());
    rinLiteralEClass.getESuperTypes().add(this.getMultiType());
    tableDeclarationEClass.getESuperTypes().add(this.getStatement());
    singleSelectDeclarationEClass.getESuperTypes().add(this.getStatement());
    insertEClass.getESuperTypes().add(this.getManipulateStatement());
    updateEClass.getESuperTypes().add(this.getManipulateStatement());
    deleteEClass.getESuperTypes().add(this.getManipulateStatement());
    simpleSelectQueryEClass.getESuperTypes().add(this.getQueryStatement());
    joinQueryEClass.getESuperTypes().add(this.getQueryStatement());
    nestedQueryEClass.getESuperTypes().add(this.getQueryStatement());

    // Initialize classes and features; add operations and parameters
    initEClass(sqlProgramEClass, SqlProgram.class, "SqlProgram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSqlProgram_Statements(), this.getStatement(), null, "statements", null, 0, -1, SqlProgram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(queryStatementEClass, QueryStatement.class, "QueryStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(manipulateStatementEClass, ManipulateStatement.class, "ManipulateStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getManipulateStatement_Table(), this.getTableDeclaration(), null, "table", null, 0, 1, ManipulateStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(multiTypeEClass, MultiType.class, "MultiType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(numLiteralEClass, NumLiteral.class, "NumLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumLiteral_Var(), ecorePackage.getEInt(), "var", null, 0, 1, NumLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(strLiteralEClass, StrLiteral.class, "StrLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStrLiteral_Var(), ecorePackage.getEString(), "var", null, 0, 1, StrLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rinLiteralEClass, RinLiteral.class, "RinLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRinLiteral_Var(), ecorePackage.getEString(), "var", null, 0, 1, RinLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tableDeclarationEClass, TableDeclaration.class, "TableDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTableDeclaration_Name(), ecorePackage.getEString(), "name", null, 0, 1, TableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleSelectDeclarationEClass, SingleSelectDeclaration.class, "SingleSelectDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSingleSelectDeclaration_Name(), ecorePackage.getEString(), "name", null, 0, 1, SingleSelectDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSingleSelectDeclaration_SingleSelect(), this.getSimpleSelectQuery(), null, "singleSelect", null, 0, 1, SingleSelectDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueEClass, Value.class, "Value", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getValue_Value(), this.getMultiType(), null, "value", null, 0, 1, Value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getValue_Separation(), ecorePackage.getEString(), "separation", null, 0, -1, Value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(equationEClass, Equation.class, "Equation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEquation_Attribute(), ecorePackage.getEString(), "attribute", null, 0, 1, Equation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEquation_Operator(), this.getOperator(), "operator", null, 0, 1, Equation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEquation_Value(), this.getMultiType(), null, "value", null, 0, 1, Equation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEquation_Separation(), ecorePackage.getEString(), "separation", null, 0, -1, Equation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vvalueEClass, Vvalue.class, "Vvalue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVvalue_Table(), this.getTableDeclaration(), null, "table", null, 0, 1, Vvalue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVvalue_Attribute(), this.getMultiType(), null, "attribute", null, 0, 1, Vvalue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVvalue_Separation(), ecorePackage.getEString(), "separation", null, 0, -1, Vvalue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(multiEquationEClass, MultiEquation.class, "MultiEquation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMultiEquation_EquationLeft(), this.getVvalue(), null, "EquationLeft", null, 0, 1, MultiEquation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMultiEquation_Operator(), this.getOperator(), "operator", null, 0, 1, MultiEquation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMultiEquation_EquationRight(), this.getVvalue(), null, "EquationRight", null, 0, 1, MultiEquation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(insertEClass, Insert.class, "Insert", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInsert_Insert_data(), this.getValue(), null, "insert_data", null, 0, -1, Insert.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(updateEClass, Update.class, "Update", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getUpdate_Modification(), this.getEquation(), null, "modification", null, 0, -1, Update.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUpdate_Updatecondition(), this.getEquation(), null, "updatecondition", null, 0, -1, Update.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deleteEClass, Delete.class, "Delete", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDelete_Deletecondition(), this.getEquation(), null, "deletecondition", null, 0, -1, Delete.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(simpleSelectQueryEClass, SimpleSelectQuery.class, "SimpleSelectQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSimpleSelectQuery_Stable(), this.getTableDeclaration(), null, "Stable", null, 0, 1, SimpleSelectQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleSelectQuery_Sattributes(), this.getValue(), null, "Sattributes", null, 0, -1, SimpleSelectQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleSelectQuery_Simplecondition(), this.getEquation(), null, "simplecondition", null, 0, -1, SimpleSelectQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSimpleSelectQuery_RemoveDup(), ecorePackage.getEString(), "removeDup", null, 0, -1, SimpleSelectQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSimpleSelectQuery_Ordertype(), this.getOrder(), "ordertype", null, 0, 1, SimpleSelectQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleSelectQuery_SCattributes(), this.getValue(), null, "SCattributes", null, 0, -1, SimpleSelectQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(joinQueryEClass, JoinQuery.class, "JoinQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJoinQuery_Jtable1(), this.getTableDeclaration(), null, "Jtable1", null, 0, 1, JoinQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJoinQuery_Jattributes(), this.getVvalue(), null, "Jattributes", null, 0, -1, JoinQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJoinQuery_Jointype(), this.getJoin(), "jointype", null, 0, 1, JoinQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJoinQuery_Jtable2(), this.getTableDeclaration(), null, "Jtable2", null, 0, 1, JoinQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJoinQuery_Joincondition(), this.getMultiEquation(), null, "joincondition", null, 0, -1, JoinQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nestedQueryEClass, NestedQuery.class, "NestedQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNestedQuery_Ntable(), this.getTableDeclaration(), null, "Ntable", null, 0, 1, NestedQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNestedQuery_Nattributes(), this.getValue(), null, "Nattributes", null, 0, -1, NestedQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNestedQuery_Nattributes1(), this.getValue(), null, "Nattributes1", null, 0, -1, NestedQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNestedQuery_Subselectquery(), this.getSingleSelectDeclaration(), null, "subselectquery", null, 0, 1, NestedQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(operatorEEnum, Operator.class, "Operator");
    addEEnumLiteral(operatorEEnum, Operator.VA);
    addEEnumLiteral(operatorEEnum, Operator.VB);
    addEEnumLiteral(operatorEEnum, Operator.VC);
    addEEnumLiteral(operatorEEnum, Operator.VD);
    addEEnumLiteral(operatorEEnum, Operator.VE);
    addEEnumLiteral(operatorEEnum, Operator.VF);

    initEEnum(joinEEnum, Join.class, "Join");
    addEEnumLiteral(joinEEnum, Join.LEFT_JOIN);
    addEEnumLiteral(joinEEnum, Join.RIGHT_JOIN);
    addEEnumLiteral(joinEEnum, Join.FULL_JOIN);
    addEEnumLiteral(joinEEnum, Join.INNER_JOIN);

    initEEnum(orderEEnum, Order.class, "Order");
    addEEnumLiteral(orderEEnum, Order.ASCENDING);
    addEEnumLiteral(orderEEnum, Order.DESCENDING);

    // Create resource
    createResource(eNS_URI);
  }

} //EasySqlPackageImpl
