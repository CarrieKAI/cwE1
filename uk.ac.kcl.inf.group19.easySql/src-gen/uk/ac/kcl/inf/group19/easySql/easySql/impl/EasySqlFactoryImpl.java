/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.easySql.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.group19.easySql.easySql.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EasySqlFactoryImpl extends EFactoryImpl implements EasySqlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EasySqlFactory init()
  {
    try
    {
      EasySqlFactory theEasySqlFactory = (EasySqlFactory)EPackage.Registry.INSTANCE.getEFactory(EasySqlPackage.eNS_URI);
      if (theEasySqlFactory != null)
      {
        return theEasySqlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EasySqlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EasySqlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EasySqlPackage.SQL_PROGRAM: return createSqlProgram();
      case EasySqlPackage.STATEMENT: return createStatement();
      case EasySqlPackage.QUERY_STATEMENT: return createQueryStatement();
      case EasySqlPackage.MANIPULATE_STATEMENT: return createManipulateStatement();
      case EasySqlPackage.MULTI_TYPE: return createMultiType();
      case EasySqlPackage.NUM_LITERAL: return createNumLiteral();
      case EasySqlPackage.STR_LITERAL: return createStrLiteral();
      case EasySqlPackage.RIN_LITERAL: return createRinLiteral();
      case EasySqlPackage.TABLE_DECLARATION: return createTableDeclaration();
      case EasySqlPackage.SINGLE_SELECT_DECLARATION: return createSingleSelectDeclaration();
      case EasySqlPackage.VALUE: return createValue();
      case EasySqlPackage.EQUATION: return createEquation();
      case EasySqlPackage.VVALUE: return createVvalue();
      case EasySqlPackage.MULTI_EQUATION: return createMultiEquation();
      case EasySqlPackage.INSERT: return createInsert();
      case EasySqlPackage.UPDATE: return createUpdate();
      case EasySqlPackage.DELETE: return createDelete();
      case EasySqlPackage.SIMPLE_SELECT_QUERY: return createSimpleSelectQuery();
      case EasySqlPackage.JOIN_QUERY: return createJoinQuery();
      case EasySqlPackage.NESTED_QUERY: return createNestedQuery();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EasySqlPackage.OPERATOR:
        return createOperatorFromString(eDataType, initialValue);
      case EasySqlPackage.JOIN:
        return createJoinFromString(eDataType, initialValue);
      case EasySqlPackage.ORDER:
        return createOrderFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EasySqlPackage.OPERATOR:
        return convertOperatorToString(eDataType, instanceValue);
      case EasySqlPackage.JOIN:
        return convertJoinToString(eDataType, instanceValue);
      case EasySqlPackage.ORDER:
        return convertOrderToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SqlProgram createSqlProgram()
  {
    SqlProgramImpl sqlProgram = new SqlProgramImpl();
    return sqlProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryStatement createQueryStatement()
  {
    QueryStatementImpl queryStatement = new QueryStatementImpl();
    return queryStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ManipulateStatement createManipulateStatement()
  {
    ManipulateStatementImpl manipulateStatement = new ManipulateStatementImpl();
    return manipulateStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiType createMultiType()
  {
    MultiTypeImpl multiType = new MultiTypeImpl();
    return multiType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumLiteral createNumLiteral()
  {
    NumLiteralImpl numLiteral = new NumLiteralImpl();
    return numLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StrLiteral createStrLiteral()
  {
    StrLiteralImpl strLiteral = new StrLiteralImpl();
    return strLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RinLiteral createRinLiteral()
  {
    RinLiteralImpl rinLiteral = new RinLiteralImpl();
    return rinLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableDeclaration createTableDeclaration()
  {
    TableDeclarationImpl tableDeclaration = new TableDeclarationImpl();
    return tableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleSelectDeclaration createSingleSelectDeclaration()
  {
    SingleSelectDeclarationImpl singleSelectDeclaration = new SingleSelectDeclarationImpl();
    return singleSelectDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equation createEquation()
  {
    EquationImpl equation = new EquationImpl();
    return equation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vvalue createVvalue()
  {
    VvalueImpl vvalue = new VvalueImpl();
    return vvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiEquation createMultiEquation()
  {
    MultiEquationImpl multiEquation = new MultiEquationImpl();
    return multiEquation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Insert createInsert()
  {
    InsertImpl insert = new InsertImpl();
    return insert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Update createUpdate()
  {
    UpdateImpl update = new UpdateImpl();
    return update;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delete createDelete()
  {
    DeleteImpl delete = new DeleteImpl();
    return delete;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleSelectQuery createSimpleSelectQuery()
  {
    SimpleSelectQueryImpl simpleSelectQuery = new SimpleSelectQueryImpl();
    return simpleSelectQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JoinQuery createJoinQuery()
  {
    JoinQueryImpl joinQuery = new JoinQueryImpl();
    return joinQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NestedQuery createNestedQuery()
  {
    NestedQueryImpl nestedQuery = new NestedQueryImpl();
    return nestedQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operator createOperatorFromString(EDataType eDataType, String initialValue)
  {
    Operator result = Operator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Join createJoinFromString(EDataType eDataType, String initialValue)
  {
    Join result = Join.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJoinToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Order createOrderFromString(EDataType eDataType, String initialValue)
  {
    Order result = Order.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOrderToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EasySqlPackage getEasySqlPackage()
  {
    return (EasySqlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EasySqlPackage getPackage()
  {
    return EasySqlPackage.eINSTANCE;
  }

} //EasySqlFactoryImpl
