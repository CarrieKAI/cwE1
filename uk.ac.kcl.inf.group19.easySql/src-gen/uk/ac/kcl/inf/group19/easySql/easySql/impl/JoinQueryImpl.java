/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.easySql.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.group19.easySql.easySql.EasySqlPackage;
import uk.ac.kcl.inf.group19.easySql.easySql.Join;
import uk.ac.kcl.inf.group19.easySql.easySql.JoinQuery;
import uk.ac.kcl.inf.group19.easySql.easySql.MultiEquation;
import uk.ac.kcl.inf.group19.easySql.easySql.TableDeclaration;
import uk.ac.kcl.inf.group19.easySql.easySql.Vvalue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Join Query</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.JoinQueryImpl#getJtable1 <em>Jtable1</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.JoinQueryImpl#getJattributes <em>Jattributes</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.JoinQueryImpl#getJointype <em>Jointype</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.JoinQueryImpl#getJtable2 <em>Jtable2</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.JoinQueryImpl#getJoincondition <em>Joincondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JoinQueryImpl extends QueryStatementImpl implements JoinQuery
{
  /**
   * The cached value of the '{@link #getJtable1() <em>Jtable1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJtable1()
   * @generated
   * @ordered
   */
  protected TableDeclaration jtable1;

  /**
   * The cached value of the '{@link #getJattributes() <em>Jattributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJattributes()
   * @generated
   * @ordered
   */
  protected EList<Vvalue> jattributes;

  /**
   * The default value of the '{@link #getJointype() <em>Jointype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJointype()
   * @generated
   * @ordered
   */
  protected static final Join JOINTYPE_EDEFAULT = Join.LEFT_JOIN;

  /**
   * The cached value of the '{@link #getJointype() <em>Jointype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJointype()
   * @generated
   * @ordered
   */
  protected Join jointype = JOINTYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getJtable2() <em>Jtable2</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJtable2()
   * @generated
   * @ordered
   */
  protected TableDeclaration jtable2;

  /**
   * The cached value of the '{@link #getJoincondition() <em>Joincondition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJoincondition()
   * @generated
   * @ordered
   */
  protected EList<MultiEquation> joincondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JoinQueryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EasySqlPackage.Literals.JOIN_QUERY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableDeclaration getJtable1()
  {
    if (jtable1 != null && jtable1.eIsProxy())
    {
      InternalEObject oldJtable1 = (InternalEObject)jtable1;
      jtable1 = (TableDeclaration)eResolveProxy(oldJtable1);
      if (jtable1 != oldJtable1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EasySqlPackage.JOIN_QUERY__JTABLE1, oldJtable1, jtable1));
      }
    }
    return jtable1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableDeclaration basicGetJtable1()
  {
    return jtable1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJtable1(TableDeclaration newJtable1)
  {
    TableDeclaration oldJtable1 = jtable1;
    jtable1 = newJtable1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.JOIN_QUERY__JTABLE1, oldJtable1, jtable1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Vvalue> getJattributes()
  {
    if (jattributes == null)
    {
      jattributes = new EObjectContainmentEList<Vvalue>(Vvalue.class, this, EasySqlPackage.JOIN_QUERY__JATTRIBUTES);
    }
    return jattributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Join getJointype()
  {
    return jointype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJointype(Join newJointype)
  {
    Join oldJointype = jointype;
    jointype = newJointype == null ? JOINTYPE_EDEFAULT : newJointype;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.JOIN_QUERY__JOINTYPE, oldJointype, jointype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableDeclaration getJtable2()
  {
    if (jtable2 != null && jtable2.eIsProxy())
    {
      InternalEObject oldJtable2 = (InternalEObject)jtable2;
      jtable2 = (TableDeclaration)eResolveProxy(oldJtable2);
      if (jtable2 != oldJtable2)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EasySqlPackage.JOIN_QUERY__JTABLE2, oldJtable2, jtable2));
      }
    }
    return jtable2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableDeclaration basicGetJtable2()
  {
    return jtable2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJtable2(TableDeclaration newJtable2)
  {
    TableDeclaration oldJtable2 = jtable2;
    jtable2 = newJtable2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.JOIN_QUERY__JTABLE2, oldJtable2, jtable2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MultiEquation> getJoincondition()
  {
    if (joincondition == null)
    {
      joincondition = new EObjectContainmentEList<MultiEquation>(MultiEquation.class, this, EasySqlPackage.JOIN_QUERY__JOINCONDITION);
    }
    return joincondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EasySqlPackage.JOIN_QUERY__JATTRIBUTES:
        return ((InternalEList<?>)getJattributes()).basicRemove(otherEnd, msgs);
      case EasySqlPackage.JOIN_QUERY__JOINCONDITION:
        return ((InternalEList<?>)getJoincondition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EasySqlPackage.JOIN_QUERY__JTABLE1:
        if (resolve) return getJtable1();
        return basicGetJtable1();
      case EasySqlPackage.JOIN_QUERY__JATTRIBUTES:
        return getJattributes();
      case EasySqlPackage.JOIN_QUERY__JOINTYPE:
        return getJointype();
      case EasySqlPackage.JOIN_QUERY__JTABLE2:
        if (resolve) return getJtable2();
        return basicGetJtable2();
      case EasySqlPackage.JOIN_QUERY__JOINCONDITION:
        return getJoincondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EasySqlPackage.JOIN_QUERY__JTABLE1:
        setJtable1((TableDeclaration)newValue);
        return;
      case EasySqlPackage.JOIN_QUERY__JATTRIBUTES:
        getJattributes().clear();
        getJattributes().addAll((Collection<? extends Vvalue>)newValue);
        return;
      case EasySqlPackage.JOIN_QUERY__JOINTYPE:
        setJointype((Join)newValue);
        return;
      case EasySqlPackage.JOIN_QUERY__JTABLE2:
        setJtable2((TableDeclaration)newValue);
        return;
      case EasySqlPackage.JOIN_QUERY__JOINCONDITION:
        getJoincondition().clear();
        getJoincondition().addAll((Collection<? extends MultiEquation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.JOIN_QUERY__JTABLE1:
        setJtable1((TableDeclaration)null);
        return;
      case EasySqlPackage.JOIN_QUERY__JATTRIBUTES:
        getJattributes().clear();
        return;
      case EasySqlPackage.JOIN_QUERY__JOINTYPE:
        setJointype(JOINTYPE_EDEFAULT);
        return;
      case EasySqlPackage.JOIN_QUERY__JTABLE2:
        setJtable2((TableDeclaration)null);
        return;
      case EasySqlPackage.JOIN_QUERY__JOINCONDITION:
        getJoincondition().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.JOIN_QUERY__JTABLE1:
        return jtable1 != null;
      case EasySqlPackage.JOIN_QUERY__JATTRIBUTES:
        return jattributes != null && !jattributes.isEmpty();
      case EasySqlPackage.JOIN_QUERY__JOINTYPE:
        return jointype != JOINTYPE_EDEFAULT;
      case EasySqlPackage.JOIN_QUERY__JTABLE2:
        return jtable2 != null;
      case EasySqlPackage.JOIN_QUERY__JOINCONDITION:
        return joincondition != null && !joincondition.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (jointype: ");
    result.append(jointype);
    result.append(')');
    return result.toString();
  }

} //JoinQueryImpl
