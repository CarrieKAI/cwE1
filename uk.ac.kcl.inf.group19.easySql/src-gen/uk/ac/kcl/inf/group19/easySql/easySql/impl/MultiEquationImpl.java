/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.group19.easySql.easySql.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.group19.easySql.easySql.EasySqlPackage;
import uk.ac.kcl.inf.group19.easySql.easySql.MultiEquation;
import uk.ac.kcl.inf.group19.easySql.easySql.Operator;
import uk.ac.kcl.inf.group19.easySql.easySql.Vvalue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Multi Equation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.MultiEquationImpl#getEquationLeft <em>Equation Left</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.MultiEquationImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group19.easySql.easySql.impl.MultiEquationImpl#getEquationRight <em>Equation Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultiEquationImpl extends MinimalEObjectImpl.Container implements MultiEquation
{
  /**
   * The cached value of the '{@link #getEquationLeft() <em>Equation Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEquationLeft()
   * @generated
   * @ordered
   */
  protected Vvalue equationLeft;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final Operator OPERATOR_EDEFAULT = Operator.VA;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected Operator operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getEquationRight() <em>Equation Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEquationRight()
   * @generated
   * @ordered
   */
  protected Vvalue equationRight;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiEquationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EasySqlPackage.Literals.MULTI_EQUATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vvalue getEquationLeft()
  {
    return equationLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEquationLeft(Vvalue newEquationLeft, NotificationChain msgs)
  {
    Vvalue oldEquationLeft = equationLeft;
    equationLeft = newEquationLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT, oldEquationLeft, newEquationLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEquationLeft(Vvalue newEquationLeft)
  {
    if (newEquationLeft != equationLeft)
    {
      NotificationChain msgs = null;
      if (equationLeft != null)
        msgs = ((InternalEObject)equationLeft).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT, null, msgs);
      if (newEquationLeft != null)
        msgs = ((InternalEObject)newEquationLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT, null, msgs);
      msgs = basicSetEquationLeft(newEquationLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT, newEquationLeft, newEquationLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(Operator newOperator)
  {
    Operator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.MULTI_EQUATION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vvalue getEquationRight()
  {
    return equationRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEquationRight(Vvalue newEquationRight, NotificationChain msgs)
  {
    Vvalue oldEquationRight = equationRight;
    equationRight = newEquationRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT, oldEquationRight, newEquationRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEquationRight(Vvalue newEquationRight)
  {
    if (newEquationRight != equationRight)
    {
      NotificationChain msgs = null;
      if (equationRight != null)
        msgs = ((InternalEObject)equationRight).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT, null, msgs);
      if (newEquationRight != null)
        msgs = ((InternalEObject)newEquationRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT, null, msgs);
      msgs = basicSetEquationRight(newEquationRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT, newEquationRight, newEquationRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT:
        return basicSetEquationLeft(null, msgs);
      case EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT:
        return basicSetEquationRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT:
        return getEquationLeft();
      case EasySqlPackage.MULTI_EQUATION__OPERATOR:
        return getOperator();
      case EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT:
        return getEquationRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT:
        setEquationLeft((Vvalue)newValue);
        return;
      case EasySqlPackage.MULTI_EQUATION__OPERATOR:
        setOperator((Operator)newValue);
        return;
      case EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT:
        setEquationRight((Vvalue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT:
        setEquationLeft((Vvalue)null);
        return;
      case EasySqlPackage.MULTI_EQUATION__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT:
        setEquationRight((Vvalue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EasySqlPackage.MULTI_EQUATION__EQUATION_LEFT:
        return equationLeft != null;
      case EasySqlPackage.MULTI_EQUATION__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case EasySqlPackage.MULTI_EQUATION__EQUATION_RIGHT:
        return equationRight != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //MultiEquationImpl
