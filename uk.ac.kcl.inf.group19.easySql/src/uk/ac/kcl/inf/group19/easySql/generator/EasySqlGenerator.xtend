/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.inf.group19.easySql.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.group19.easySql.easySql.SqlProgram
import uk.ac.kcl.inf.group19.easySql.easySql.Statement
import uk.ac.kcl.inf.group19.easySql.easySql.ManipulateStatement
import uk.ac.kcl.inf.group19.easySql.easySql.QueryStatement
import uk.ac.kcl.inf.group19.easySql.easySql.SingleSelectDeclaration
import uk.ac.kcl.inf.group19.easySql.easySql.Insert
import uk.ac.kcl.inf.group19.easySql.easySql.Delete
import uk.ac.kcl.inf.group19.easySql.easySql.StrLiteral
import uk.ac.kcl.inf.group19.easySql.easySql.RinLiteral
import uk.ac.kcl.inf.group19.easySql.easySql.Update
import uk.ac.kcl.inf.group19.easySql.easySql.SimpleSelectQuery
import uk.ac.kcl.inf.group19.easySql.easySql.NumLiteral
import uk.ac.kcl.inf.group19.easySql.easySql.Order
import uk.ac.kcl.inf.group19.easySql.easySql.JoinQuery
import uk.ac.kcl.inf.group19.easySql.easySql.Join
import uk.ac.kcl.inf.group19.easySql.easySql.NestedQuery
import uk.ac.kcl.inf.group19.easySql.easySql.TableDeclaration

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EasySqlGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    
    val model = resource.contents.head as SqlProgram
    
    fsa.generateFile(autoGenerateSqlName(resource), model.generate )
	}
     
	def autoGenerateSqlName(Resource resource) {
		val origFileName = resource.URI.lastSegment
		origFileName.substring(0, origFileName.indexOf(".")).toFirstUpper + ".sql.txt";
	}
   
    def String generate(SqlProgram program)'''«program.statements.reject(TableDeclaration).reject(SingleSelectDeclaration).map[generateEasySqlStatement].join('\n')»'''
    //«  »
    dispatch def String generateEasySqlStatement(Statement stmt)''''''
	
	dispatch def String generateEasySqlStatement(ManipulateStatement mstmt)
	{
	'''«if(mstmt instanceof Delete) ''' 
	     DELETE FROM «mstmt.table.name» «
	     if(!mstmt.deletecondition.empty) '''WHERE«
	     FOR index: (0..mstmt.deletecondition.size-1)»«  
	     
	     if(mstmt.deletecondition.get(index).value instanceof StrLiteral)''' «mstmt.deletecondition.get(index).attribute» «mstmt.deletecondition.get(index).operator» ''«cutting(mstmt.deletecondition.get(index).value.toString)»'' «
	          if(!mstmt.deletecondition.get(index).separation.empty) '''AND'''»'''  
	     else if(mstmt.deletecondition.get(index).value instanceof RinLiteral)''' «mstmt.deletecondition.get(index).attribute» «mstmt.deletecondition.get(index).operator» ''«cutting(mstmt.deletecondition.get(index).value.toString)»'' «
	          if(!mstmt.deletecondition.get(index).separation.empty) '''AND'''»'''  
	     else ''' «mstmt.deletecondition.get(index).attribute» «mstmt.deletecondition.get(index).operator» «cutting(mstmt.deletecondition.get(index).value.toString)» «
	          if(!mstmt.deletecondition.get(index).separation.empty) '''AND'''»'''
	     »«ENDFOR»'''»''' »«
        
        
         if(mstmt instanceof Insert) '''INSERT INTO «mstmt.table.name» VALUES («
            if(!mstmt.insert_data.empty) '''«
               FOR index1: (0..mstmt.insert_data.size-1)»«
	              if(mstmt.insert_data.get(index1).value instanceof StrLiteral)'''''«cutting(mstmt.insert_data.get(index1).value.toString)»''«
	                 if(!mstmt.insert_data.get(index1).separation.empty) ''', '''»''' 
	           
	              else if(mstmt.insert_data.get(index1).value instanceof RinLiteral)'''''«cutting(mstmt.insert_data.get(index1).value.toString)»''«
	                 if(!mstmt.insert_data.get(index1).separation.empty) ''', '''»''' 
	           
	              else '''«cutting(mstmt.insert_data.get(index1).value.toString)»«
	                 if(!mstmt.insert_data.get(index1).separation.empty) ''', '''»''' 
	         »«ENDFOR»)''' 
	        else ''')'''»'''»«
	    
	    if(mstmt instanceof Update) '''UPDATE «mstmt.table.name» SET «
	        if(!mstmt.modification.empty) '''«
               FOR index2: (0..mstmt.modification.size-1)»«
                  if(mstmt.modification.get(index2).value instanceof StrLiteral)'''«mstmt.modification.get(index2).attribute»«mstmt.modification.get(index2).operator» ''«cutting(mstmt.modification.get(index2).value.toString)»''«
                       if(!mstmt.modification.get(index2).separation.empty) ''', '''»'''
                  else if(mstmt.modification.get(index2).value instanceof RinLiteral)'''«mstmt.modification.get(index2).attribute»«mstmt.modification.get(index2).operator» ''«cutting(mstmt.modification.get(index2).value.toString)»''«
                       if(!mstmt.modification.get(index2).separation.empty) ''', '''»'''
                  else '''«mstmt.modification.get(index2).attribute»«mstmt.modification.get(index2).operator»  «cutting(mstmt.modification.get(index2).value.toString)»«if(!mstmt.modification.get(index2).separation.empty) ''', '''»  '''»«
               ENDFOR»'''»«
            if(!mstmt.updatecondition.empty) ''' WHERE «
               FOR index3: (0..mstmt.updatecondition.size-1)»«
                  if(mstmt.updatecondition.get(index3).value instanceof StrLiteral)'''«mstmt.updatecondition.get(index3).attribute» «mstmt.updatecondition.get(index3).operator» ''«cutting(mstmt.updatecondition.get(index3).value.toString)»'' «
                       if(!mstmt.updatecondition.get(index3).separation.empty) '''AND'''» '''  
                  else if(mstmt.updatecondition.get(index3).value instanceof RinLiteral)'''«mstmt.updatecondition.get(index3).attribute» «mstmt.updatecondition.get(index3).operator» ''«cutting(mstmt.updatecondition.get(index3).value.toString)»'' «
                       if(!mstmt.updatecondition.get(index3).separation.empty) '''AND'''» '''  
                  else '''«mstmt.updatecondition.get(index3).attribute» «mstmt.updatecondition.get(index3).operator» «cutting(mstmt.updatecondition.get(index3).value.toString)» «if(!mstmt.updatecondition.get(index3).separation.empty) '''AND'''» '''
        »«ENDFOR»'''»'''»'''
    
	}
	
	dispatch def String generateEasySqlStatement(QueryStatement qstmt){
	  '''«if(qstmt instanceof SimpleSelectQuery) '''«generateSingleSelection(qstmt)»'''»«
	  
	  if(qstmt instanceof JoinQuery) 
	 '''SELECT «if(qstmt.jattributes.empty)'''*''' 
	         else '''«
	            FOR index7: (0..qstmt.jattributes.size-1)»«qstmt.jattributes.get(index7).table.name».«cutting(qstmt.jattributes.get(index7).attribute.toString)»«
	               if(!qstmt.jattributes.get(index7).separation.empty) ''','''» «
	            ENDFOR»'''»FROM «qstmt.jtable1.name» «
	               if(qstmt.jointype===Join.FULL_JOIN) '''FULL JOIN''' 
	               else if(qstmt.jointype===Join.LEFT_JOIN) '''LEFT JOIN''' 
	               else if(qstmt.jointype===Join.RIGHT_JOIN) '''RIGHT JOIN''' 
	               else '''INNER JOIN'''» «qstmt.jtable2.name» ON «if(!qstmt.joincondition.empty) '''«
	               FOR index8: (0..qstmt.joincondition.size-1)»«
	               qstmt.joincondition.get(index8).equationLeft.table.name».«
	               cutting(qstmt.joincondition.get(index8).equationLeft.attribute.toString)» «
	               qstmt.joincondition.get(index8).operator» «qstmt.joincondition.get(index8).equationRight.table.name».«
	               cutting(qstmt.joincondition.get(index8).equationRight.attribute.toString)»«
	               
	               if(!qstmt.joincondition.get(index8).equationRight.separation.empty) ''' AND '''»«
	               ENDFOR»'''»'''»«
	  
	  if(qstmt instanceof NestedQuery)
	 '''SELECT«
	  if(qstmt.nattributes.empty) ''' * ''' 
	  else ''' «
	    FOR index9: (0..qstmt.nattributes.size-1)»«cutting(qstmt.nattributes.get(index9).value.toString)»«
	        if(!qstmt.nattributes.get(index9).separation.empty) ''','''»«
	    ENDFOR»'''» FROM «qstmt.ntable.name» WHERE «if(!qstmt.nattributes1.empty)'''«
	    	        FOR index10: (0..qstmt.nattributes1.size-1)»«
	    	            cutting(qstmt.nattributes1.get(index10).value.toString)»«
	    	        if(!qstmt.nattributes1.get(index10).separation.empty) ''','''»«
	    	        ENDFOR»'''» IN («generateSingleSelection(qstmt.subselectquery.singleSelect)»)'''»'''
	}
	dispatch def String generateEasySqlStatement(SingleSelectDeclaration sstmt)''''''
	dispatch def String generateEasySqlStatement(TableDeclaration tstmt) ''''''
	
	//cut string 
	def String cutting(String a)
	{
		var begin = a.indexOf(":")+2
		var end = a.indexOf(")")
		var result = a.substring(begin,end)
		return result
	}
	
	//generate a single selection
	def String generateSingleSelection(SimpleSelectQuery sq)
	{
		var Singleselection =
	  
	  '''SELECT «
	     if(!sq.removeDup.empty) '''DISTINCT '''»«
	     if(sq.sattributes.empty) '''*'''
	     else '''«
	        FOR indexA: (0..sq.sattributes.size-1)»«cutting(sq.sattributes.get(indexA).value.toString)»«
            if(!sq.sattributes.get(indexA).separation.empty) ''', '''»«
	        ENDFOR»'''» FROM «sq.stable.name» «if(sq.simplecondition.empty) ''''''else '''WHERE«
	        FOR indexB: (0..sq.simplecondition.size-1)»«
	            if(sq.simplecondition.get(indexB).value instanceof NumLiteral)''' «
	              sq.simplecondition.get(indexB).attribute» «
	               sq.simplecondition.get(indexB).operator» «
	               cutting(sq.simplecondition.get(indexB).value.toString)» «
	            if(!sq.simplecondition.get(indexB).separation.empty) '''AND'''»'''
	            else ''' «sq.simplecondition.get(indexB).attribute» «sq.simplecondition.get(indexB).operator» ''«cutting(sq.simplecondition.get(indexB).value.toString)»'' «
	               if(!sq.simplecondition.get(indexB).separation.empty) '''AND'''»'''
	      »«ENDFOR»'''
	   »«if(!sq.SCattributes.empty) '''ORDER BY «
	        FOR indexC: (0..sq.SCattributes.size-1)»«cutting(sq.SCattributes.get(indexC).value.toString)»«
	           if(!sq.SCattributes.get(indexC).separation.empty) ''', '''»« 
	        ENDFOR»«
	           if(sq.ordertype===Order.ASCENDING) ''' ASC''' else ''' DESC'''»'''»'''
	  
	   return Singleselection
	}
}
